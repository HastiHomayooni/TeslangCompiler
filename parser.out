Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN
    COMMENT
    INT
    NULL
    STR
    VECTOR

Grammar

Rule 0     S' -> prog
Rule 1     prog -> empty
Rule 2     prog -> func prog
Rule 3     func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
Rule 4     func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
Rule 5     func -> FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
Rule 6     func -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
Rule 7     body -> empty
Rule 8     body -> stmt body
Rule 9     stmt -> expr SEMI_COLON
Rule 10    stmt -> defvar SEMI_COLON
Rule 11    stmt -> func SEMI_COLON
Rule 12    stmt -> single_if
Rule 13    stmt -> if_with_else
Rule 14    stmt -> while_loop
Rule 15    stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
Rule 16    stmt -> for_loop
Rule 17    stmt -> block
Rule 18    stmt -> return_instr SEMI_COLON
Rule 19    stmt -> error SEMI_COLON
Rule 20    stmt -> error
Rule 21    single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
Rule 22    if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
Rule 23    while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
Rule 24    for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt
Rule 25    block -> BEGIN body END
Rule 26    return_instr -> RETURN expr
Rule 27    defvar -> ID DBL_COLON TYPE
Rule 28    defvar -> ID DBL_COLON TYPE EQ expr
Rule 29    flist -> empty
Rule 30    flist -> ID AS TYPE
Rule 31    flist -> ID AS TYPE COMMA flist
Rule 32    flist -> error AS TYPE COMMA flist
Rule 33    flist -> ID error TYPE COMMA flist
Rule 34    flist -> ID AS error COMMA flist
Rule 35    flist -> ID AS TYPE COMMA error
Rule 36    clist -> empty
Rule 37    clist -> expr
Rule 38    clist -> expr COMMA clist
Rule 39    in_methods -> SCAN LPAREN RPAREN
Rule 40    in_methods -> PRINT LPAREN clist RPAREN
Rule 41    in_methods -> LIST LPAREN clist RPAREN
Rule 42    in_methods -> LEN LPAREN clist RPAREN
Rule 43    in_methods -> EXIT LPAREN clist RPAREN
Rule 44    expr -> expr LSQUAREBR expr RSQUAREBR
Rule 45    expr -> LSQUAREBR clist RSQUAREBR
Rule 46    expr -> expr QUESTION expr COLON expr
Rule 47    expr -> expr PLUS expr
Rule 48    expr -> expr MINUS expr
Rule 49    expr -> expr TIMES expr
Rule 50    expr -> expr DIVIDE expr
Rule 51    expr -> expr GREATER_THAN expr
Rule 52    expr -> expr LESS_THAN expr
Rule 53    expr -> expr EQUAL expr
Rule 54    expr -> expr EQ expr
Rule 55    expr -> expr GREATER_THAN_EQUAL_TO expr
Rule 56    expr -> expr LESS_THAN_EQUAL_TO expr
Rule 57    expr -> expr NOT_EQUAL expr
Rule 58    expr -> expr OR expr
Rule 59    expr -> expr AND expr
Rule 60    expr -> NOT expr
Rule 61    expr -> PLUS expr
Rule 62    expr -> MINUS expr
Rule 63    expr -> ID
Rule 64    expr -> assignment
Rule 65    expr -> ID LPAREN clist RPAREN
Rule 66    expr -> NUMBER
Rule 67    expr -> in_methods
Rule 68    expr -> STRING
Rule 69    expr_list -> LSQUAREBR clist RSQUAREBR
Rule 70    operation_on_list -> expr LSQUAREBR expr RSQUAREBR
Rule 71    operation_on_list -> ID LSQUAREBR expr RSQUAREBR
Rule 72    assignment -> ID EQ expr
Rule 73    ternary_expr -> expr QUESTION expr COLON expr
Rule 74    function_call -> ID LPAREN clist RPAREN
Rule 75    function_call -> ID LPAREN error RPAREN
Rule 76    binary_expr -> expr PLUS expr
Rule 77    binary_expr -> expr MINUS expr
Rule 78    binary_expr -> expr TIMES expr
Rule 79    binary_expr -> expr DIVIDE expr
Rule 80    binary_expr -> expr MOD expr
Rule 81    binary_expr -> expr GREATER_THAN expr
Rule 82    binary_expr -> expr GREATER_THAN_EQUAL_TO expr
Rule 83    binary_expr -> expr LESS_THAN expr
Rule 84    binary_expr -> expr LESS_THAN_EQUAL_TO expr
Rule 85    binary_expr -> expr EQ expr
Rule 86    binary_expr -> expr EQUAL expr
Rule 87    binary_expr -> expr NOT expr
Rule 88    binary_expr -> expr NOT_EQUAL expr
Rule 89    binary_expr -> expr OR expr
Rule 90    binary_expr -> expr AND expr
Rule 91    empty -> <empty>

Terminals, with rules where they appear

AND                  : 59 90
AS                   : 30 31 32 34 35
BEGIN                : 25
BOOLEAN              : 
COLON                : 46 73
COMMA                : 31 32 33 34 35 38
COMMENT              : 
DBL_COLON            : 27 28
DIVIDE               : 50 79
DO                   : 15
ELSE                 : 22
END                  : 25
EQ                   : 4 24 28 54 72 85
EQUAL                : 53 86
EXIT                 : 43
FN                   : 3 4 5 6
FOR                  : 24
GREATER_THAN         : 3 4 4 5 6 51 81
GREATER_THAN_EQUAL_TO : 55 82
ID                   : 3 4 5 6 24 27 28 30 31 33 34 35 63 65 71 72 74 75
IF                   : 21 22
INT                  : 
LCURLYEBR            : 3 5 6
LEN                  : 42
LESS_THAN            : 3 4 5 6 52 83
LESS_THAN_EQUAL_TO   : 56 84
LIST                 : 41
LPAREN               : 3 4 5 6 24 39 40 41 42 43 65 74 75
LSQUAREBR            : 15 15 21 21 22 22 23 23 44 45 69 70 71
MINUS                : 48 62 77
MOD                  : 80
NOT                  : 60 87
NOT_EQUAL            : 57 88
NULL                 : 
NUMBER               : 66
OR                   : 58 89
PLUS                 : 47 61 76
PRINT                : 40
QUESTION             : 46 73
RCURLYEBR            : 3 5 6
RETURN               : 4 26
RPAREN               : 3 4 5 6 24 39 40 41 42 43 65 74 75
RSQUAREBR            : 15 15 21 21 22 22 23 23 44 45 69 70 71
SCAN                 : 39
SEMI_COLON           : 4 9 10 11 18 19
STR                  : 
STRING               : 68
TIMES                : 49 78
TO                   : 24
TYPE                 : 3 4 5 27 28 30 31 32 33 35
VECTOR               : 
WHILE                : 15 23
error                : 5 6 19 20 32 33 34 35 75

Nonterminals, with rules where they appear

assignment           : 64
binary_expr          : 
block                : 17
body                 : 3 5 6 8 25
clist                : 38 40 41 42 43 45 65 69 74
defvar               : 10
empty                : 1 7 29 36
expr                 : 4 9 15 21 22 23 24 24 26 28 37 38 44 44 46 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 61 62 70 70 71 72 73 73 73 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90
expr_list            : 
flist                : 3 4 6 31 32 33 34
for_loop             : 16
func                 : 2 11
function_call        : 
if_with_else         : 13
in_methods           : 67
operation_on_list    : 
prog                 : 2 0
return_instr         : 18
single_if            : 12
stmt                 : 8 15 21 22 22 23 24
ternary_expr         : 
while_loop           : 14

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . empty
    (2) prog -> . func prog
    (91) empty -> .
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR

    $end            reduce using rule 91 (empty -> .)
    FN              shift and go to state 4

    prog                           shift and go to state 1
    empty                          shift and go to state 2
    func                           shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> empty .

    $end            reduce using rule 1 (prog -> empty .)


state 3

    (2) prog -> func . prog
    (1) prog -> . empty
    (2) prog -> . func prog
    (91) empty -> .
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR

    $end            reduce using rule 91 (empty -> .)
    FN              shift and go to state 4

    func                           shift and go to state 3
    prog                           shift and go to state 5
    empty                          shift and go to state 2

state 4

    (3) func -> FN . ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> FN . ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> FN . ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> FN . ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR

    ID              shift and go to state 6


state 5

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 6

    (3) func -> FN ID . LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> FN ID . LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> FN ID . LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> FN ID . LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR

    LPAREN          shift and go to state 7


state 7

    (3) func -> FN ID LPAREN . flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> FN ID LPAREN . flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> FN ID LPAREN . error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> FN ID LPAREN . flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (29) flist -> . empty
    (30) flist -> . ID AS TYPE
    (31) flist -> . ID AS TYPE COMMA flist
    (32) flist -> . error AS TYPE COMMA flist
    (33) flist -> . ID error TYPE COMMA flist
    (34) flist -> . ID AS error COMMA flist
    (35) flist -> . ID AS TYPE COMMA error
    (91) empty -> .

    error           shift and go to state 10
    ID              shift and go to state 8
    RPAREN          reduce using rule 91 (empty -> .)

    flist                          shift and go to state 9
    empty                          shift and go to state 11

state 8

    (30) flist -> ID . AS TYPE
    (31) flist -> ID . AS TYPE COMMA flist
    (33) flist -> ID . error TYPE COMMA flist
    (34) flist -> ID . AS error COMMA flist
    (35) flist -> ID . AS TYPE COMMA error

    AS              shift and go to state 12
    error           shift and go to state 13


state 9

    (3) func -> FN ID LPAREN flist . RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> FN ID LPAREN flist . RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (6) func -> FN ID LPAREN flist . RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR

    RPAREN          shift and go to state 14


state 10

    (5) func -> FN ID LPAREN error . RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (32) flist -> error . AS TYPE COMMA flist

    RPAREN          shift and go to state 15
    AS              shift and go to state 16


state 11

    (29) flist -> empty .

    RPAREN          reduce using rule 29 (flist -> empty .)


state 12

    (30) flist -> ID AS . TYPE
    (31) flist -> ID AS . TYPE COMMA flist
    (34) flist -> ID AS . error COMMA flist
    (35) flist -> ID AS . TYPE COMMA error

    TYPE            shift and go to state 17
    error           shift and go to state 18


state 13

    (33) flist -> ID error . TYPE COMMA flist

    TYPE            shift and go to state 19


state 14

    (3) func -> FN ID LPAREN flist RPAREN . LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> FN ID LPAREN flist RPAREN . LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (6) func -> FN ID LPAREN flist RPAREN . LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR

    LESS_THAN       shift and go to state 20


state 15

    (5) func -> FN ID LPAREN error RPAREN . LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR

    LESS_THAN       shift and go to state 21


state 16

    (32) flist -> error AS . TYPE COMMA flist

    TYPE            shift and go to state 22


state 17

    (30) flist -> ID AS TYPE .
    (31) flist -> ID AS TYPE . COMMA flist
    (35) flist -> ID AS TYPE . COMMA error

    RPAREN          reduce using rule 30 (flist -> ID AS TYPE .)
    COMMA           shift and go to state 23


state 18

    (34) flist -> ID AS error . COMMA flist

    COMMA           shift and go to state 24


state 19

    (33) flist -> ID error TYPE . COMMA flist

    COMMA           shift and go to state 25


state 20

    (3) func -> FN ID LPAREN flist RPAREN LESS_THAN . TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> FN ID LPAREN flist RPAREN LESS_THAN . TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (6) func -> FN ID LPAREN flist RPAREN LESS_THAN . error GREATER_THAN LCURLYEBR body RCURLYEBR

    TYPE            shift and go to state 26
    error           shift and go to state 27


state 21

    (5) func -> FN ID LPAREN error RPAREN LESS_THAN . TYPE GREATER_THAN LCURLYEBR body RCURLYEBR

    TYPE            shift and go to state 28


state 22

    (32) flist -> error AS TYPE . COMMA flist

    COMMA           shift and go to state 29


state 23

    (31) flist -> ID AS TYPE COMMA . flist
    (35) flist -> ID AS TYPE COMMA . error
    (29) flist -> . empty
    (30) flist -> . ID AS TYPE
    (31) flist -> . ID AS TYPE COMMA flist
    (32) flist -> . error AS TYPE COMMA flist
    (33) flist -> . ID error TYPE COMMA flist
    (34) flist -> . ID AS error COMMA flist
    (35) flist -> . ID AS TYPE COMMA error
    (91) empty -> .

    error           shift and go to state 31
    ID              shift and go to state 8
    RPAREN          reduce using rule 91 (empty -> .)

    flist                          shift and go to state 30
    empty                          shift and go to state 11

state 24

    (34) flist -> ID AS error COMMA . flist
    (29) flist -> . empty
    (30) flist -> . ID AS TYPE
    (31) flist -> . ID AS TYPE COMMA flist
    (32) flist -> . error AS TYPE COMMA flist
    (33) flist -> . ID error TYPE COMMA flist
    (34) flist -> . ID AS error COMMA flist
    (35) flist -> . ID AS TYPE COMMA error
    (91) empty -> .

    ID              shift and go to state 8
    error           shift and go to state 32
    RPAREN          reduce using rule 91 (empty -> .)

    flist                          shift and go to state 33
    empty                          shift and go to state 11

state 25

    (33) flist -> ID error TYPE COMMA . flist
    (29) flist -> . empty
    (30) flist -> . ID AS TYPE
    (31) flist -> . ID AS TYPE COMMA flist
    (32) flist -> . error AS TYPE COMMA flist
    (33) flist -> . ID error TYPE COMMA flist
    (34) flist -> . ID AS error COMMA flist
    (35) flist -> . ID AS TYPE COMMA error
    (91) empty -> .

    ID              shift and go to state 8
    error           shift and go to state 32
    RPAREN          reduce using rule 91 (empty -> .)

    flist                          shift and go to state 34
    empty                          shift and go to state 11

state 26

    (3) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE . GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE . GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON

    GREATER_THAN    shift and go to state 35


state 27

    (6) func -> FN ID LPAREN flist RPAREN LESS_THAN error . GREATER_THAN LCURLYEBR body RCURLYEBR

    GREATER_THAN    shift and go to state 36


state 28

    (5) func -> FN ID LPAREN error RPAREN LESS_THAN TYPE . GREATER_THAN LCURLYEBR body RCURLYEBR

    GREATER_THAN    shift and go to state 37


state 29

    (32) flist -> error AS TYPE COMMA . flist
    (29) flist -> . empty
    (30) flist -> . ID AS TYPE
    (31) flist -> . ID AS TYPE COMMA flist
    (32) flist -> . error AS TYPE COMMA flist
    (33) flist -> . ID error TYPE COMMA flist
    (34) flist -> . ID AS error COMMA flist
    (35) flist -> . ID AS TYPE COMMA error
    (91) empty -> .

    ID              shift and go to state 8
    error           shift and go to state 32
    RPAREN          reduce using rule 91 (empty -> .)

    flist                          shift and go to state 38
    empty                          shift and go to state 11

state 30

    (31) flist -> ID AS TYPE COMMA flist .

    RPAREN          reduce using rule 31 (flist -> ID AS TYPE COMMA flist .)


state 31

    (35) flist -> ID AS TYPE COMMA error .
    (32) flist -> error . AS TYPE COMMA flist

    RPAREN          reduce using rule 35 (flist -> ID AS TYPE COMMA error .)
    AS              shift and go to state 16


state 32

    (32) flist -> error . AS TYPE COMMA flist

    AS              shift and go to state 16


state 33

    (34) flist -> ID AS error COMMA flist .

    RPAREN          reduce using rule 34 (flist -> ID AS error COMMA flist .)


state 34

    (33) flist -> ID error TYPE COMMA flist .

    RPAREN          reduce using rule 33 (flist -> ID error TYPE COMMA flist .)


state 35

    (3) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN . LCURLYEBR body RCURLYEBR
    (4) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN . EQ GREATER_THAN RETURN expr SEMI_COLON

    LCURLYEBR       shift and go to state 39
    EQ              shift and go to state 40


state 36

    (6) func -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN . LCURLYEBR body RCURLYEBR

    LCURLYEBR       shift and go to state 41


state 37

    (5) func -> FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN . LCURLYEBR body RCURLYEBR

    LCURLYEBR       shift and go to state 42


state 38

    (32) flist -> error AS TYPE COMMA flist .

    RPAREN          reduce using rule 32 (flist -> error AS TYPE COMMA flist .)


state 39

    (3) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR . body RCURLYEBR
    (7) body -> . empty
    (8) body -> . stmt body
    (91) empty -> .
    (9) stmt -> . expr SEMI_COLON
    (10) stmt -> . defvar SEMI_COLON
    (11) stmt -> . func SEMI_COLON
    (12) stmt -> . single_if
    (13) stmt -> . if_with_else
    (14) stmt -> . while_loop
    (15) stmt -> . DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (16) stmt -> . for_loop
    (17) stmt -> . block
    (18) stmt -> . return_instr SEMI_COLON
    (19) stmt -> . error SEMI_COLON
    (20) stmt -> . error
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (27) defvar -> . ID DBL_COLON TYPE
    (28) defvar -> . ID DBL_COLON TYPE EQ expr
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (21) single_if -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (23) while_loop -> . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (24) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (25) block -> . BEGIN body END
    (26) return_instr -> . RETURN expr
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RCURLYEBR       reduce using rule 91 (empty -> .)
    DO              shift and go to state 53
    error           shift and go to state 59
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 43
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    FN              shift and go to state 4
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 69
    BEGIN           shift and go to state 70
    RETURN          shift and go to state 67
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    body                           shift and go to state 44
    empty                          shift and go to state 45
    stmt                           shift and go to state 46
    expr                           shift and go to state 47
    defvar                         shift and go to state 48
    func                           shift and go to state 49
    single_if                      shift and go to state 50
    if_with_else                   shift and go to state 51
    while_loop                     shift and go to state 52
    for_loop                       shift and go to state 56
    block                          shift and go to state 57
    return_instr                   shift and go to state 58
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 40

    (4) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ . GREATER_THAN RETURN expr SEMI_COLON

    GREATER_THAN    shift and go to state 76


state 41

    (6) func -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR . body RCURLYEBR
    (7) body -> . empty
    (8) body -> . stmt body
    (91) empty -> .
    (9) stmt -> . expr SEMI_COLON
    (10) stmt -> . defvar SEMI_COLON
    (11) stmt -> . func SEMI_COLON
    (12) stmt -> . single_if
    (13) stmt -> . if_with_else
    (14) stmt -> . while_loop
    (15) stmt -> . DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (16) stmt -> . for_loop
    (17) stmt -> . block
    (18) stmt -> . return_instr SEMI_COLON
    (19) stmt -> . error SEMI_COLON
    (20) stmt -> . error
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (27) defvar -> . ID DBL_COLON TYPE
    (28) defvar -> . ID DBL_COLON TYPE EQ expr
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (21) single_if -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (23) while_loop -> . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (24) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (25) block -> . BEGIN body END
    (26) return_instr -> . RETURN expr
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RCURLYEBR       reduce using rule 91 (empty -> .)
    DO              shift and go to state 53
    error           shift and go to state 59
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 43
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    FN              shift and go to state 4
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 69
    BEGIN           shift and go to state 70
    RETURN          shift and go to state 67
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    body                           shift and go to state 77
    empty                          shift and go to state 45
    stmt                           shift and go to state 46
    expr                           shift and go to state 47
    defvar                         shift and go to state 48
    func                           shift and go to state 49
    single_if                      shift and go to state 50
    if_with_else                   shift and go to state 51
    while_loop                     shift and go to state 52
    for_loop                       shift and go to state 56
    block                          shift and go to state 57
    return_instr                   shift and go to state 58
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 42

    (5) func -> FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR . body RCURLYEBR
    (7) body -> . empty
    (8) body -> . stmt body
    (91) empty -> .
    (9) stmt -> . expr SEMI_COLON
    (10) stmt -> . defvar SEMI_COLON
    (11) stmt -> . func SEMI_COLON
    (12) stmt -> . single_if
    (13) stmt -> . if_with_else
    (14) stmt -> . while_loop
    (15) stmt -> . DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (16) stmt -> . for_loop
    (17) stmt -> . block
    (18) stmt -> . return_instr SEMI_COLON
    (19) stmt -> . error SEMI_COLON
    (20) stmt -> . error
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (27) defvar -> . ID DBL_COLON TYPE
    (28) defvar -> . ID DBL_COLON TYPE EQ expr
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (21) single_if -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (23) while_loop -> . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (24) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (25) block -> . BEGIN body END
    (26) return_instr -> . RETURN expr
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RCURLYEBR       reduce using rule 91 (empty -> .)
    DO              shift and go to state 53
    error           shift and go to state 59
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 43
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    FN              shift and go to state 4
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 69
    BEGIN           shift and go to state 70
    RETURN          shift and go to state 67
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    body                           shift and go to state 78
    empty                          shift and go to state 45
    stmt                           shift and go to state 46
    expr                           shift and go to state 47
    defvar                         shift and go to state 48
    func                           shift and go to state 49
    single_if                      shift and go to state 50
    if_with_else                   shift and go to state 51
    while_loop                     shift and go to state 52
    for_loop                       shift and go to state 56
    block                          shift and go to state 57
    return_instr                   shift and go to state 58
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 43

    (63) expr -> ID .
    (65) expr -> ID . LPAREN clist RPAREN
    (27) defvar -> ID . DBL_COLON TYPE
    (28) defvar -> ID . DBL_COLON TYPE EQ expr
    (72) assignment -> ID . EQ expr

  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 63 (expr -> ID .)
    LSQUAREBR       reduce using rule 63 (expr -> ID .)
    QUESTION        reduce using rule 63 (expr -> ID .)
    PLUS            reduce using rule 63 (expr -> ID .)
    MINUS           reduce using rule 63 (expr -> ID .)
    TIMES           reduce using rule 63 (expr -> ID .)
    DIVIDE          reduce using rule 63 (expr -> ID .)
    GREATER_THAN    reduce using rule 63 (expr -> ID .)
    LESS_THAN       reduce using rule 63 (expr -> ID .)
    EQUAL           reduce using rule 63 (expr -> ID .)
    GREATER_THAN_EQUAL_TO reduce using rule 63 (expr -> ID .)
    LESS_THAN_EQUAL_TO reduce using rule 63 (expr -> ID .)
    NOT_EQUAL       reduce using rule 63 (expr -> ID .)
    OR              reduce using rule 63 (expr -> ID .)
    AND             reduce using rule 63 (expr -> ID .)
    LPAREN          shift and go to state 79
    DBL_COLON       shift and go to state 80
    EQ              shift and go to state 81

  ! EQ              [ reduce using rule 63 (expr -> ID .) ]


state 44

    (3) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body . RCURLYEBR

    RCURLYEBR       shift and go to state 82


state 45

    (7) body -> empty .

    RCURLYEBR       reduce using rule 7 (body -> empty .)
    END             reduce using rule 7 (body -> empty .)


state 46

    (8) body -> stmt . body
    (7) body -> . empty
    (8) body -> . stmt body
    (91) empty -> .
    (9) stmt -> . expr SEMI_COLON
    (10) stmt -> . defvar SEMI_COLON
    (11) stmt -> . func SEMI_COLON
    (12) stmt -> . single_if
    (13) stmt -> . if_with_else
    (14) stmt -> . while_loop
    (15) stmt -> . DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (16) stmt -> . for_loop
    (17) stmt -> . block
    (18) stmt -> . return_instr SEMI_COLON
    (19) stmt -> . error SEMI_COLON
    (20) stmt -> . error
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (27) defvar -> . ID DBL_COLON TYPE
    (28) defvar -> . ID DBL_COLON TYPE EQ expr
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (21) single_if -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (23) while_loop -> . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (24) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (25) block -> . BEGIN body END
    (26) return_instr -> . RETURN expr
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RCURLYEBR       reduce using rule 91 (empty -> .)
    END             reduce using rule 91 (empty -> .)
    DO              shift and go to state 53
    error           shift and go to state 59
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 43
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    FN              shift and go to state 4
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 69
    BEGIN           shift and go to state 70
    RETURN          shift and go to state 67
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    stmt                           shift and go to state 46
    body                           shift and go to state 83
    empty                          shift and go to state 45
    expr                           shift and go to state 47
    defvar                         shift and go to state 48
    func                           shift and go to state 49
    single_if                      shift and go to state 50
    if_with_else                   shift and go to state 51
    while_loop                     shift and go to state 52
    for_loop                       shift and go to state 56
    block                          shift and go to state 57
    return_instr                   shift and go to state 58
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 47

    (9) stmt -> expr . SEMI_COLON
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 84
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 48

    (10) stmt -> defvar . SEMI_COLON

    SEMI_COLON      shift and go to state 100


state 49

    (11) stmt -> func . SEMI_COLON

    SEMI_COLON      shift and go to state 101


state 50

    (12) stmt -> single_if .

    DO              reduce using rule 12 (stmt -> single_if .)
    error           reduce using rule 12 (stmt -> single_if .)
    LSQUAREBR       reduce using rule 12 (stmt -> single_if .)
    NOT             reduce using rule 12 (stmt -> single_if .)
    PLUS            reduce using rule 12 (stmt -> single_if .)
    MINUS           reduce using rule 12 (stmt -> single_if .)
    ID              reduce using rule 12 (stmt -> single_if .)
    NUMBER          reduce using rule 12 (stmt -> single_if .)
    STRING          reduce using rule 12 (stmt -> single_if .)
    FN              reduce using rule 12 (stmt -> single_if .)
    IF              reduce using rule 12 (stmt -> single_if .)
    WHILE           reduce using rule 12 (stmt -> single_if .)
    FOR             reduce using rule 12 (stmt -> single_if .)
    BEGIN           reduce using rule 12 (stmt -> single_if .)
    RETURN          reduce using rule 12 (stmt -> single_if .)
    SCAN            reduce using rule 12 (stmt -> single_if .)
    PRINT           reduce using rule 12 (stmt -> single_if .)
    LIST            reduce using rule 12 (stmt -> single_if .)
    LEN             reduce using rule 12 (stmt -> single_if .)
    EXIT            reduce using rule 12 (stmt -> single_if .)
    RCURLYEBR       reduce using rule 12 (stmt -> single_if .)
    END             reduce using rule 12 (stmt -> single_if .)
    ELSE            reduce using rule 12 (stmt -> single_if .)


state 51

    (13) stmt -> if_with_else .

    DO              reduce using rule 13 (stmt -> if_with_else .)
    error           reduce using rule 13 (stmt -> if_with_else .)
    LSQUAREBR       reduce using rule 13 (stmt -> if_with_else .)
    NOT             reduce using rule 13 (stmt -> if_with_else .)
    PLUS            reduce using rule 13 (stmt -> if_with_else .)
    MINUS           reduce using rule 13 (stmt -> if_with_else .)
    ID              reduce using rule 13 (stmt -> if_with_else .)
    NUMBER          reduce using rule 13 (stmt -> if_with_else .)
    STRING          reduce using rule 13 (stmt -> if_with_else .)
    FN              reduce using rule 13 (stmt -> if_with_else .)
    IF              reduce using rule 13 (stmt -> if_with_else .)
    WHILE           reduce using rule 13 (stmt -> if_with_else .)
    FOR             reduce using rule 13 (stmt -> if_with_else .)
    BEGIN           reduce using rule 13 (stmt -> if_with_else .)
    RETURN          reduce using rule 13 (stmt -> if_with_else .)
    SCAN            reduce using rule 13 (stmt -> if_with_else .)
    PRINT           reduce using rule 13 (stmt -> if_with_else .)
    LIST            reduce using rule 13 (stmt -> if_with_else .)
    LEN             reduce using rule 13 (stmt -> if_with_else .)
    EXIT            reduce using rule 13 (stmt -> if_with_else .)
    RCURLYEBR       reduce using rule 13 (stmt -> if_with_else .)
    END             reduce using rule 13 (stmt -> if_with_else .)
    ELSE            reduce using rule 13 (stmt -> if_with_else .)


state 52

    (14) stmt -> while_loop .

    DO              reduce using rule 14 (stmt -> while_loop .)
    error           reduce using rule 14 (stmt -> while_loop .)
    LSQUAREBR       reduce using rule 14 (stmt -> while_loop .)
    NOT             reduce using rule 14 (stmt -> while_loop .)
    PLUS            reduce using rule 14 (stmt -> while_loop .)
    MINUS           reduce using rule 14 (stmt -> while_loop .)
    ID              reduce using rule 14 (stmt -> while_loop .)
    NUMBER          reduce using rule 14 (stmt -> while_loop .)
    STRING          reduce using rule 14 (stmt -> while_loop .)
    FN              reduce using rule 14 (stmt -> while_loop .)
    IF              reduce using rule 14 (stmt -> while_loop .)
    WHILE           reduce using rule 14 (stmt -> while_loop .)
    FOR             reduce using rule 14 (stmt -> while_loop .)
    BEGIN           reduce using rule 14 (stmt -> while_loop .)
    RETURN          reduce using rule 14 (stmt -> while_loop .)
    SCAN            reduce using rule 14 (stmt -> while_loop .)
    PRINT           reduce using rule 14 (stmt -> while_loop .)
    LIST            reduce using rule 14 (stmt -> while_loop .)
    LEN             reduce using rule 14 (stmt -> while_loop .)
    EXIT            reduce using rule 14 (stmt -> while_loop .)
    RCURLYEBR       reduce using rule 14 (stmt -> while_loop .)
    END             reduce using rule 14 (stmt -> while_loop .)
    ELSE            reduce using rule 14 (stmt -> while_loop .)


state 53

    (15) stmt -> DO . stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (9) stmt -> . expr SEMI_COLON
    (10) stmt -> . defvar SEMI_COLON
    (11) stmt -> . func SEMI_COLON
    (12) stmt -> . single_if
    (13) stmt -> . if_with_else
    (14) stmt -> . while_loop
    (15) stmt -> . DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (16) stmt -> . for_loop
    (17) stmt -> . block
    (18) stmt -> . return_instr SEMI_COLON
    (19) stmt -> . error SEMI_COLON
    (20) stmt -> . error
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (27) defvar -> . ID DBL_COLON TYPE
    (28) defvar -> . ID DBL_COLON TYPE EQ expr
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (21) single_if -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (23) while_loop -> . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (24) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (25) block -> . BEGIN body END
    (26) return_instr -> . RETURN expr
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    DO              shift and go to state 53
    error           shift and go to state 59
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 43
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    FN              shift and go to state 4
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 69
    BEGIN           shift and go to state 70
    RETURN          shift and go to state 67
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    stmt                           shift and go to state 102
    expr                           shift and go to state 47
    defvar                         shift and go to state 48
    func                           shift and go to state 49
    single_if                      shift and go to state 50
    if_with_else                   shift and go to state 51
    while_loop                     shift and go to state 52
    for_loop                       shift and go to state 56
    block                          shift and go to state 57
    return_instr                   shift and go to state 58
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 54

    (23) while_loop -> WHILE . LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt

    LSQUAREBR       shift and go to state 103


state 55

    (45) expr -> LSQUAREBR . clist RSQUAREBR
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (91) empty -> .
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RSQUAREBR       reduce using rule 91 (empty -> .)
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    clist                          shift and go to state 104
    empty                          shift and go to state 105
    expr                           shift and go to state 106
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 56

    (16) stmt -> for_loop .

    DO              reduce using rule 16 (stmt -> for_loop .)
    error           reduce using rule 16 (stmt -> for_loop .)
    LSQUAREBR       reduce using rule 16 (stmt -> for_loop .)
    NOT             reduce using rule 16 (stmt -> for_loop .)
    PLUS            reduce using rule 16 (stmt -> for_loop .)
    MINUS           reduce using rule 16 (stmt -> for_loop .)
    ID              reduce using rule 16 (stmt -> for_loop .)
    NUMBER          reduce using rule 16 (stmt -> for_loop .)
    STRING          reduce using rule 16 (stmt -> for_loop .)
    FN              reduce using rule 16 (stmt -> for_loop .)
    IF              reduce using rule 16 (stmt -> for_loop .)
    WHILE           reduce using rule 16 (stmt -> for_loop .)
    FOR             reduce using rule 16 (stmt -> for_loop .)
    BEGIN           reduce using rule 16 (stmt -> for_loop .)
    RETURN          reduce using rule 16 (stmt -> for_loop .)
    SCAN            reduce using rule 16 (stmt -> for_loop .)
    PRINT           reduce using rule 16 (stmt -> for_loop .)
    LIST            reduce using rule 16 (stmt -> for_loop .)
    LEN             reduce using rule 16 (stmt -> for_loop .)
    EXIT            reduce using rule 16 (stmt -> for_loop .)
    RCURLYEBR       reduce using rule 16 (stmt -> for_loop .)
    END             reduce using rule 16 (stmt -> for_loop .)
    ELSE            reduce using rule 16 (stmt -> for_loop .)


state 57

    (17) stmt -> block .

    DO              reduce using rule 17 (stmt -> block .)
    error           reduce using rule 17 (stmt -> block .)
    LSQUAREBR       reduce using rule 17 (stmt -> block .)
    NOT             reduce using rule 17 (stmt -> block .)
    PLUS            reduce using rule 17 (stmt -> block .)
    MINUS           reduce using rule 17 (stmt -> block .)
    ID              reduce using rule 17 (stmt -> block .)
    NUMBER          reduce using rule 17 (stmt -> block .)
    STRING          reduce using rule 17 (stmt -> block .)
    FN              reduce using rule 17 (stmt -> block .)
    IF              reduce using rule 17 (stmt -> block .)
    WHILE           reduce using rule 17 (stmt -> block .)
    FOR             reduce using rule 17 (stmt -> block .)
    BEGIN           reduce using rule 17 (stmt -> block .)
    RETURN          reduce using rule 17 (stmt -> block .)
    SCAN            reduce using rule 17 (stmt -> block .)
    PRINT           reduce using rule 17 (stmt -> block .)
    LIST            reduce using rule 17 (stmt -> block .)
    LEN             reduce using rule 17 (stmt -> block .)
    EXIT            reduce using rule 17 (stmt -> block .)
    RCURLYEBR       reduce using rule 17 (stmt -> block .)
    END             reduce using rule 17 (stmt -> block .)
    ELSE            reduce using rule 17 (stmt -> block .)


state 58

    (18) stmt -> return_instr . SEMI_COLON

    SEMI_COLON      shift and go to state 108


state 59

    (19) stmt -> error . SEMI_COLON
    (20) stmt -> error .

    SEMI_COLON      shift and go to state 109
    DO              reduce using rule 20 (stmt -> error .)
    error           reduce using rule 20 (stmt -> error .)
    LSQUAREBR       reduce using rule 20 (stmt -> error .)
    NOT             reduce using rule 20 (stmt -> error .)
    PLUS            reduce using rule 20 (stmt -> error .)
    MINUS           reduce using rule 20 (stmt -> error .)
    ID              reduce using rule 20 (stmt -> error .)
    NUMBER          reduce using rule 20 (stmt -> error .)
    STRING          reduce using rule 20 (stmt -> error .)
    FN              reduce using rule 20 (stmt -> error .)
    IF              reduce using rule 20 (stmt -> error .)
    WHILE           reduce using rule 20 (stmt -> error .)
    FOR             reduce using rule 20 (stmt -> error .)
    BEGIN           reduce using rule 20 (stmt -> error .)
    RETURN          reduce using rule 20 (stmt -> error .)
    SCAN            reduce using rule 20 (stmt -> error .)
    PRINT           reduce using rule 20 (stmt -> error .)
    LIST            reduce using rule 20 (stmt -> error .)
    LEN             reduce using rule 20 (stmt -> error .)
    EXIT            reduce using rule 20 (stmt -> error .)
    RCURLYEBR       reduce using rule 20 (stmt -> error .)
    END             reduce using rule 20 (stmt -> error .)
    ELSE            reduce using rule 20 (stmt -> error .)


state 60

    (61) expr -> PLUS . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 110
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 61

    (62) expr -> MINUS . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 111
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 62

    (60) expr -> NOT . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 112
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 63

    (64) expr -> assignment .

    SEMI_COLON      reduce using rule 64 (expr -> assignment .)
    LSQUAREBR       reduce using rule 64 (expr -> assignment .)
    QUESTION        reduce using rule 64 (expr -> assignment .)
    PLUS            reduce using rule 64 (expr -> assignment .)
    MINUS           reduce using rule 64 (expr -> assignment .)
    TIMES           reduce using rule 64 (expr -> assignment .)
    DIVIDE          reduce using rule 64 (expr -> assignment .)
    GREATER_THAN    reduce using rule 64 (expr -> assignment .)
    LESS_THAN       reduce using rule 64 (expr -> assignment .)
    EQUAL           reduce using rule 64 (expr -> assignment .)
    EQ              reduce using rule 64 (expr -> assignment .)
    GREATER_THAN_EQUAL_TO reduce using rule 64 (expr -> assignment .)
    LESS_THAN_EQUAL_TO reduce using rule 64 (expr -> assignment .)
    NOT_EQUAL       reduce using rule 64 (expr -> assignment .)
    OR              reduce using rule 64 (expr -> assignment .)
    AND             reduce using rule 64 (expr -> assignment .)
    COMMA           reduce using rule 64 (expr -> assignment .)
    RSQUAREBR       reduce using rule 64 (expr -> assignment .)
    RPAREN          reduce using rule 64 (expr -> assignment .)
    COLON           reduce using rule 64 (expr -> assignment .)
    TO              reduce using rule 64 (expr -> assignment .)


state 64

    (66) expr -> NUMBER .

    SEMI_COLON      reduce using rule 66 (expr -> NUMBER .)
    LSQUAREBR       reduce using rule 66 (expr -> NUMBER .)
    QUESTION        reduce using rule 66 (expr -> NUMBER .)
    PLUS            reduce using rule 66 (expr -> NUMBER .)
    MINUS           reduce using rule 66 (expr -> NUMBER .)
    TIMES           reduce using rule 66 (expr -> NUMBER .)
    DIVIDE          reduce using rule 66 (expr -> NUMBER .)
    GREATER_THAN    reduce using rule 66 (expr -> NUMBER .)
    LESS_THAN       reduce using rule 66 (expr -> NUMBER .)
    EQUAL           reduce using rule 66 (expr -> NUMBER .)
    EQ              reduce using rule 66 (expr -> NUMBER .)
    GREATER_THAN_EQUAL_TO reduce using rule 66 (expr -> NUMBER .)
    LESS_THAN_EQUAL_TO reduce using rule 66 (expr -> NUMBER .)
    NOT_EQUAL       reduce using rule 66 (expr -> NUMBER .)
    OR              reduce using rule 66 (expr -> NUMBER .)
    AND             reduce using rule 66 (expr -> NUMBER .)
    COMMA           reduce using rule 66 (expr -> NUMBER .)
    RSQUAREBR       reduce using rule 66 (expr -> NUMBER .)
    RPAREN          reduce using rule 66 (expr -> NUMBER .)
    COLON           reduce using rule 66 (expr -> NUMBER .)
    TO              reduce using rule 66 (expr -> NUMBER .)


state 65

    (67) expr -> in_methods .

    SEMI_COLON      reduce using rule 67 (expr -> in_methods .)
    LSQUAREBR       reduce using rule 67 (expr -> in_methods .)
    QUESTION        reduce using rule 67 (expr -> in_methods .)
    PLUS            reduce using rule 67 (expr -> in_methods .)
    MINUS           reduce using rule 67 (expr -> in_methods .)
    TIMES           reduce using rule 67 (expr -> in_methods .)
    DIVIDE          reduce using rule 67 (expr -> in_methods .)
    GREATER_THAN    reduce using rule 67 (expr -> in_methods .)
    LESS_THAN       reduce using rule 67 (expr -> in_methods .)
    EQUAL           reduce using rule 67 (expr -> in_methods .)
    EQ              reduce using rule 67 (expr -> in_methods .)
    GREATER_THAN_EQUAL_TO reduce using rule 67 (expr -> in_methods .)
    LESS_THAN_EQUAL_TO reduce using rule 67 (expr -> in_methods .)
    NOT_EQUAL       reduce using rule 67 (expr -> in_methods .)
    OR              reduce using rule 67 (expr -> in_methods .)
    AND             reduce using rule 67 (expr -> in_methods .)
    COMMA           reduce using rule 67 (expr -> in_methods .)
    RSQUAREBR       reduce using rule 67 (expr -> in_methods .)
    RPAREN          reduce using rule 67 (expr -> in_methods .)
    COLON           reduce using rule 67 (expr -> in_methods .)
    TO              reduce using rule 67 (expr -> in_methods .)


state 66

    (68) expr -> STRING .

    SEMI_COLON      reduce using rule 68 (expr -> STRING .)
    LSQUAREBR       reduce using rule 68 (expr -> STRING .)
    QUESTION        reduce using rule 68 (expr -> STRING .)
    PLUS            reduce using rule 68 (expr -> STRING .)
    MINUS           reduce using rule 68 (expr -> STRING .)
    TIMES           reduce using rule 68 (expr -> STRING .)
    DIVIDE          reduce using rule 68 (expr -> STRING .)
    GREATER_THAN    reduce using rule 68 (expr -> STRING .)
    LESS_THAN       reduce using rule 68 (expr -> STRING .)
    EQUAL           reduce using rule 68 (expr -> STRING .)
    EQ              reduce using rule 68 (expr -> STRING .)
    GREATER_THAN_EQUAL_TO reduce using rule 68 (expr -> STRING .)
    LESS_THAN_EQUAL_TO reduce using rule 68 (expr -> STRING .)
    NOT_EQUAL       reduce using rule 68 (expr -> STRING .)
    OR              reduce using rule 68 (expr -> STRING .)
    AND             reduce using rule 68 (expr -> STRING .)
    COMMA           reduce using rule 68 (expr -> STRING .)
    RSQUAREBR       reduce using rule 68 (expr -> STRING .)
    RPAREN          reduce using rule 68 (expr -> STRING .)
    COLON           reduce using rule 68 (expr -> STRING .)
    TO              reduce using rule 68 (expr -> STRING .)


state 67

    (26) return_instr -> RETURN . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 113
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 68

    (21) single_if -> IF . LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> IF . LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt

    LSQUAREBR       shift and go to state 114


state 69

    (24) for_loop -> FOR . LPAREN ID EQ expr TO expr RPAREN stmt

    LPAREN          shift and go to state 115


state 70

    (25) block -> BEGIN . body END
    (7) body -> . empty
    (8) body -> . stmt body
    (91) empty -> .
    (9) stmt -> . expr SEMI_COLON
    (10) stmt -> . defvar SEMI_COLON
    (11) stmt -> . func SEMI_COLON
    (12) stmt -> . single_if
    (13) stmt -> . if_with_else
    (14) stmt -> . while_loop
    (15) stmt -> . DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (16) stmt -> . for_loop
    (17) stmt -> . block
    (18) stmt -> . return_instr SEMI_COLON
    (19) stmt -> . error SEMI_COLON
    (20) stmt -> . error
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (27) defvar -> . ID DBL_COLON TYPE
    (28) defvar -> . ID DBL_COLON TYPE EQ expr
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (21) single_if -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (23) while_loop -> . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (24) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (25) block -> . BEGIN body END
    (26) return_instr -> . RETURN expr
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    END             reduce using rule 91 (empty -> .)
    DO              shift and go to state 53
    error           shift and go to state 59
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 43
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    FN              shift and go to state 4
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 69
    BEGIN           shift and go to state 70
    RETURN          shift and go to state 67
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    body                           shift and go to state 116
    empty                          shift and go to state 45
    stmt                           shift and go to state 46
    expr                           shift and go to state 47
    defvar                         shift and go to state 48
    func                           shift and go to state 49
    single_if                      shift and go to state 50
    if_with_else                   shift and go to state 51
    while_loop                     shift and go to state 52
    for_loop                       shift and go to state 56
    block                          shift and go to state 57
    return_instr                   shift and go to state 58
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 71

    (39) in_methods -> SCAN . LPAREN RPAREN

    LPAREN          shift and go to state 117


state 72

    (40) in_methods -> PRINT . LPAREN clist RPAREN

    LPAREN          shift and go to state 118


state 73

    (41) in_methods -> LIST . LPAREN clist RPAREN

    LPAREN          shift and go to state 119


state 74

    (42) in_methods -> LEN . LPAREN clist RPAREN

    LPAREN          shift and go to state 120


state 75

    (43) in_methods -> EXIT . LPAREN clist RPAREN

    LPAREN          shift and go to state 121


state 76

    (4) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN . RETURN expr SEMI_COLON

    RETURN          shift and go to state 122


state 77

    (6) func -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body . RCURLYEBR

    RCURLYEBR       shift and go to state 123


state 78

    (5) func -> FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body . RCURLYEBR

    RCURLYEBR       shift and go to state 124


state 79

    (65) expr -> ID LPAREN . clist RPAREN
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (91) empty -> .
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RPAREN          reduce using rule 91 (empty -> .)
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    clist                          shift and go to state 125
    empty                          shift and go to state 105
    expr                           shift and go to state 106
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 80

    (27) defvar -> ID DBL_COLON . TYPE
    (28) defvar -> ID DBL_COLON . TYPE EQ expr

    TYPE            shift and go to state 126


state 81

    (72) assignment -> ID EQ . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 127
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 82

    (3) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR .

    FN              reduce using rule 3 (func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR .)
    $end            reduce using rule 3 (func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR .)
    SEMI_COLON      reduce using rule 3 (func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR .)


state 83

    (8) body -> stmt body .

    RCURLYEBR       reduce using rule 8 (body -> stmt body .)
    END             reduce using rule 8 (body -> stmt body .)


state 84

    (9) stmt -> expr SEMI_COLON .

    DO              reduce using rule 9 (stmt -> expr SEMI_COLON .)
    error           reduce using rule 9 (stmt -> expr SEMI_COLON .)
    LSQUAREBR       reduce using rule 9 (stmt -> expr SEMI_COLON .)
    NOT             reduce using rule 9 (stmt -> expr SEMI_COLON .)
    PLUS            reduce using rule 9 (stmt -> expr SEMI_COLON .)
    MINUS           reduce using rule 9 (stmt -> expr SEMI_COLON .)
    ID              reduce using rule 9 (stmt -> expr SEMI_COLON .)
    NUMBER          reduce using rule 9 (stmt -> expr SEMI_COLON .)
    STRING          reduce using rule 9 (stmt -> expr SEMI_COLON .)
    FN              reduce using rule 9 (stmt -> expr SEMI_COLON .)
    IF              reduce using rule 9 (stmt -> expr SEMI_COLON .)
    WHILE           reduce using rule 9 (stmt -> expr SEMI_COLON .)
    FOR             reduce using rule 9 (stmt -> expr SEMI_COLON .)
    BEGIN           reduce using rule 9 (stmt -> expr SEMI_COLON .)
    RETURN          reduce using rule 9 (stmt -> expr SEMI_COLON .)
    SCAN            reduce using rule 9 (stmt -> expr SEMI_COLON .)
    PRINT           reduce using rule 9 (stmt -> expr SEMI_COLON .)
    LIST            reduce using rule 9 (stmt -> expr SEMI_COLON .)
    LEN             reduce using rule 9 (stmt -> expr SEMI_COLON .)
    EXIT            reduce using rule 9 (stmt -> expr SEMI_COLON .)
    RCURLYEBR       reduce using rule 9 (stmt -> expr SEMI_COLON .)
    END             reduce using rule 9 (stmt -> expr SEMI_COLON .)
    ELSE            reduce using rule 9 (stmt -> expr SEMI_COLON .)


state 85

    (44) expr -> expr LSQUAREBR . expr RSQUAREBR
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 128
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 86

    (46) expr -> expr QUESTION . expr COLON expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 129
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 87

    (47) expr -> expr PLUS . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 130
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 88

    (48) expr -> expr MINUS . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 131
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 89

    (49) expr -> expr TIMES . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 132
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 90

    (50) expr -> expr DIVIDE . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 133
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 91

    (51) expr -> expr GREATER_THAN . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 134
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 92

    (52) expr -> expr LESS_THAN . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 135
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 93

    (53) expr -> expr EQUAL . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 136
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 94

    (54) expr -> expr EQ . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 137
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 95

    (55) expr -> expr GREATER_THAN_EQUAL_TO . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 138
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 96

    (56) expr -> expr LESS_THAN_EQUAL_TO . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 139
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 97

    (57) expr -> expr NOT_EQUAL . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 140
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 98

    (58) expr -> expr OR . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 141
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 99

    (59) expr -> expr AND . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 142
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 100

    (10) stmt -> defvar SEMI_COLON .

    DO              reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    error           reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    LSQUAREBR       reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    NOT             reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    PLUS            reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    MINUS           reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    ID              reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    NUMBER          reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    STRING          reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    FN              reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    IF              reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    WHILE           reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    FOR             reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    BEGIN           reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    RETURN          reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    SCAN            reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    PRINT           reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    LIST            reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    LEN             reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    EXIT            reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    RCURLYEBR       reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    END             reduce using rule 10 (stmt -> defvar SEMI_COLON .)
    ELSE            reduce using rule 10 (stmt -> defvar SEMI_COLON .)


state 101

    (11) stmt -> func SEMI_COLON .

    DO              reduce using rule 11 (stmt -> func SEMI_COLON .)
    error           reduce using rule 11 (stmt -> func SEMI_COLON .)
    LSQUAREBR       reduce using rule 11 (stmt -> func SEMI_COLON .)
    NOT             reduce using rule 11 (stmt -> func SEMI_COLON .)
    PLUS            reduce using rule 11 (stmt -> func SEMI_COLON .)
    MINUS           reduce using rule 11 (stmt -> func SEMI_COLON .)
    ID              reduce using rule 11 (stmt -> func SEMI_COLON .)
    NUMBER          reduce using rule 11 (stmt -> func SEMI_COLON .)
    STRING          reduce using rule 11 (stmt -> func SEMI_COLON .)
    FN              reduce using rule 11 (stmt -> func SEMI_COLON .)
    IF              reduce using rule 11 (stmt -> func SEMI_COLON .)
    WHILE           reduce using rule 11 (stmt -> func SEMI_COLON .)
    FOR             reduce using rule 11 (stmt -> func SEMI_COLON .)
    BEGIN           reduce using rule 11 (stmt -> func SEMI_COLON .)
    RETURN          reduce using rule 11 (stmt -> func SEMI_COLON .)
    SCAN            reduce using rule 11 (stmt -> func SEMI_COLON .)
    PRINT           reduce using rule 11 (stmt -> func SEMI_COLON .)
    LIST            reduce using rule 11 (stmt -> func SEMI_COLON .)
    LEN             reduce using rule 11 (stmt -> func SEMI_COLON .)
    EXIT            reduce using rule 11 (stmt -> func SEMI_COLON .)
    RCURLYEBR       reduce using rule 11 (stmt -> func SEMI_COLON .)
    END             reduce using rule 11 (stmt -> func SEMI_COLON .)
    ELSE            reduce using rule 11 (stmt -> func SEMI_COLON .)


state 102

    (15) stmt -> DO stmt . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR

    WHILE           shift and go to state 143


state 103

    (23) while_loop -> WHILE LSQUAREBR . LSQUAREBR expr RSQUAREBR RSQUAREBR stmt

    LSQUAREBR       shift and go to state 144


state 104

    (45) expr -> LSQUAREBR clist . RSQUAREBR

    RSQUAREBR       shift and go to state 145


state 105

    (36) clist -> empty .

    RSQUAREBR       reduce using rule 36 (clist -> empty .)
    RPAREN          reduce using rule 36 (clist -> empty .)


state 106

    (37) clist -> expr .
    (38) clist -> expr . COMMA clist
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    RSQUAREBR       reduce using rule 37 (clist -> expr .)
    RPAREN          reduce using rule 37 (clist -> expr .)
    COMMA           shift and go to state 146
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 107

    (63) expr -> ID .
    (65) expr -> ID . LPAREN clist RPAREN
    (72) assignment -> ID . EQ expr

  ! shift/reduce conflict for EQ resolved as shift
    COMMA           reduce using rule 63 (expr -> ID .)
    LSQUAREBR       reduce using rule 63 (expr -> ID .)
    QUESTION        reduce using rule 63 (expr -> ID .)
    PLUS            reduce using rule 63 (expr -> ID .)
    MINUS           reduce using rule 63 (expr -> ID .)
    TIMES           reduce using rule 63 (expr -> ID .)
    DIVIDE          reduce using rule 63 (expr -> ID .)
    GREATER_THAN    reduce using rule 63 (expr -> ID .)
    LESS_THAN       reduce using rule 63 (expr -> ID .)
    EQUAL           reduce using rule 63 (expr -> ID .)
    GREATER_THAN_EQUAL_TO reduce using rule 63 (expr -> ID .)
    LESS_THAN_EQUAL_TO reduce using rule 63 (expr -> ID .)
    NOT_EQUAL       reduce using rule 63 (expr -> ID .)
    OR              reduce using rule 63 (expr -> ID .)
    AND             reduce using rule 63 (expr -> ID .)
    RSQUAREBR       reduce using rule 63 (expr -> ID .)
    SEMI_COLON      reduce using rule 63 (expr -> ID .)
    RPAREN          reduce using rule 63 (expr -> ID .)
    COLON           reduce using rule 63 (expr -> ID .)
    TO              reduce using rule 63 (expr -> ID .)
    LPAREN          shift and go to state 79
    EQ              shift and go to state 81

  ! EQ              [ reduce using rule 63 (expr -> ID .) ]


state 108

    (18) stmt -> return_instr SEMI_COLON .

    DO              reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    error           reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    LSQUAREBR       reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    NOT             reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    PLUS            reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    MINUS           reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    ID              reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    NUMBER          reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    STRING          reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    FN              reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    IF              reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    WHILE           reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    FOR             reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    BEGIN           reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    RETURN          reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    SCAN            reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    PRINT           reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    LIST            reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    LEN             reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    EXIT            reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    RCURLYEBR       reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    END             reduce using rule 18 (stmt -> return_instr SEMI_COLON .)
    ELSE            reduce using rule 18 (stmt -> return_instr SEMI_COLON .)


state 109

    (19) stmt -> error SEMI_COLON .

    DO              reduce using rule 19 (stmt -> error SEMI_COLON .)
    error           reduce using rule 19 (stmt -> error SEMI_COLON .)
    LSQUAREBR       reduce using rule 19 (stmt -> error SEMI_COLON .)
    NOT             reduce using rule 19 (stmt -> error SEMI_COLON .)
    PLUS            reduce using rule 19 (stmt -> error SEMI_COLON .)
    MINUS           reduce using rule 19 (stmt -> error SEMI_COLON .)
    ID              reduce using rule 19 (stmt -> error SEMI_COLON .)
    NUMBER          reduce using rule 19 (stmt -> error SEMI_COLON .)
    STRING          reduce using rule 19 (stmt -> error SEMI_COLON .)
    FN              reduce using rule 19 (stmt -> error SEMI_COLON .)
    IF              reduce using rule 19 (stmt -> error SEMI_COLON .)
    WHILE           reduce using rule 19 (stmt -> error SEMI_COLON .)
    FOR             reduce using rule 19 (stmt -> error SEMI_COLON .)
    BEGIN           reduce using rule 19 (stmt -> error SEMI_COLON .)
    RETURN          reduce using rule 19 (stmt -> error SEMI_COLON .)
    SCAN            reduce using rule 19 (stmt -> error SEMI_COLON .)
    PRINT           reduce using rule 19 (stmt -> error SEMI_COLON .)
    LIST            reduce using rule 19 (stmt -> error SEMI_COLON .)
    LEN             reduce using rule 19 (stmt -> error SEMI_COLON .)
    EXIT            reduce using rule 19 (stmt -> error SEMI_COLON .)
    RCURLYEBR       reduce using rule 19 (stmt -> error SEMI_COLON .)
    END             reduce using rule 19 (stmt -> error SEMI_COLON .)
    ELSE            reduce using rule 19 (stmt -> error SEMI_COLON .)


state 110

    (61) expr -> PLUS expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 61 (expr -> PLUS expr .)
    LSQUAREBR       reduce using rule 61 (expr -> PLUS expr .)
    PLUS            reduce using rule 61 (expr -> PLUS expr .)
    MINUS           reduce using rule 61 (expr -> PLUS expr .)
    GREATER_THAN    reduce using rule 61 (expr -> PLUS expr .)
    LESS_THAN       reduce using rule 61 (expr -> PLUS expr .)
    EQUAL           reduce using rule 61 (expr -> PLUS expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 61 (expr -> PLUS expr .)
    LESS_THAN_EQUAL_TO reduce using rule 61 (expr -> PLUS expr .)
    NOT_EQUAL       reduce using rule 61 (expr -> PLUS expr .)
    OR              reduce using rule 61 (expr -> PLUS expr .)
    AND             reduce using rule 61 (expr -> PLUS expr .)
    COMMA           reduce using rule 61 (expr -> PLUS expr .)
    RSQUAREBR       reduce using rule 61 (expr -> PLUS expr .)
    RPAREN          reduce using rule 61 (expr -> PLUS expr .)
    COLON           reduce using rule 61 (expr -> PLUS expr .)
    TO              reduce using rule 61 (expr -> PLUS expr .)
    QUESTION        shift and go to state 86
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 61 (expr -> PLUS expr .) ]
  ! TIMES           [ reduce using rule 61 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 61 (expr -> PLUS expr .) ]
  ! EQ              [ reduce using rule 61 (expr -> PLUS expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 111

    (62) expr -> MINUS expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 62 (expr -> MINUS expr .)
    LSQUAREBR       reduce using rule 62 (expr -> MINUS expr .)
    PLUS            reduce using rule 62 (expr -> MINUS expr .)
    MINUS           reduce using rule 62 (expr -> MINUS expr .)
    GREATER_THAN    reduce using rule 62 (expr -> MINUS expr .)
    LESS_THAN       reduce using rule 62 (expr -> MINUS expr .)
    EQUAL           reduce using rule 62 (expr -> MINUS expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 62 (expr -> MINUS expr .)
    LESS_THAN_EQUAL_TO reduce using rule 62 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 62 (expr -> MINUS expr .)
    OR              reduce using rule 62 (expr -> MINUS expr .)
    AND             reduce using rule 62 (expr -> MINUS expr .)
    COMMA           reduce using rule 62 (expr -> MINUS expr .)
    RSQUAREBR       reduce using rule 62 (expr -> MINUS expr .)
    RPAREN          reduce using rule 62 (expr -> MINUS expr .)
    COLON           reduce using rule 62 (expr -> MINUS expr .)
    TO              reduce using rule 62 (expr -> MINUS expr .)
    QUESTION        shift and go to state 86
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 62 (expr -> MINUS expr .) ]
  ! TIMES           [ reduce using rule 62 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 62 (expr -> MINUS expr .) ]
  ! EQ              [ reduce using rule 62 (expr -> MINUS expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 112

    (60) expr -> NOT expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 60 (expr -> NOT expr .)
    LSQUAREBR       reduce using rule 60 (expr -> NOT expr .)
    QUESTION        reduce using rule 60 (expr -> NOT expr .)
    PLUS            reduce using rule 60 (expr -> NOT expr .)
    MINUS           reduce using rule 60 (expr -> NOT expr .)
    TIMES           reduce using rule 60 (expr -> NOT expr .)
    DIVIDE          reduce using rule 60 (expr -> NOT expr .)
    GREATER_THAN    reduce using rule 60 (expr -> NOT expr .)
    LESS_THAN       reduce using rule 60 (expr -> NOT expr .)
    EQUAL           reduce using rule 60 (expr -> NOT expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 60 (expr -> NOT expr .)
    LESS_THAN_EQUAL_TO reduce using rule 60 (expr -> NOT expr .)
    NOT_EQUAL       reduce using rule 60 (expr -> NOT expr .)
    OR              reduce using rule 60 (expr -> NOT expr .)
    AND             reduce using rule 60 (expr -> NOT expr .)
    COMMA           reduce using rule 60 (expr -> NOT expr .)
    RSQUAREBR       reduce using rule 60 (expr -> NOT expr .)
    RPAREN          reduce using rule 60 (expr -> NOT expr .)
    COLON           reduce using rule 60 (expr -> NOT expr .)
    TO              reduce using rule 60 (expr -> NOT expr .)
    EQ              shift and go to state 94

  ! EQ              [ reduce using rule 60 (expr -> NOT expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! QUESTION        [ shift and go to state 86 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 113

    (26) return_instr -> RETURN expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 26 (return_instr -> RETURN expr .)
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 114

    (21) single_if -> IF LSQUAREBR . LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> IF LSQUAREBR . LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt

    LSQUAREBR       shift and go to state 147


state 115

    (24) for_loop -> FOR LPAREN . ID EQ expr TO expr RPAREN stmt

    ID              shift and go to state 148


state 116

    (25) block -> BEGIN body . END

    END             shift and go to state 149


state 117

    (39) in_methods -> SCAN LPAREN . RPAREN

    RPAREN          shift and go to state 150


state 118

    (40) in_methods -> PRINT LPAREN . clist RPAREN
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (91) empty -> .
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RPAREN          reduce using rule 91 (empty -> .)
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    clist                          shift and go to state 151
    empty                          shift and go to state 105
    expr                           shift and go to state 106
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 119

    (41) in_methods -> LIST LPAREN . clist RPAREN
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (91) empty -> .
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RPAREN          reduce using rule 91 (empty -> .)
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    clist                          shift and go to state 152
    empty                          shift and go to state 105
    expr                           shift and go to state 106
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 120

    (42) in_methods -> LEN LPAREN . clist RPAREN
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (91) empty -> .
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RPAREN          reduce using rule 91 (empty -> .)
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    clist                          shift and go to state 153
    empty                          shift and go to state 105
    expr                           shift and go to state 106
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 121

    (43) in_methods -> EXIT LPAREN . clist RPAREN
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (91) empty -> .
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RPAREN          reduce using rule 91 (empty -> .)
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    clist                          shift and go to state 154
    empty                          shift and go to state 105
    expr                           shift and go to state 106
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 122

    (4) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN . expr SEMI_COLON
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 155
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 123

    (6) func -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR .

    FN              reduce using rule 6 (func -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR .)
    $end            reduce using rule 6 (func -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR .)
    SEMI_COLON      reduce using rule 6 (func -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR .)


state 124

    (5) func -> FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR .

    FN              reduce using rule 5 (func -> FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR .)
    $end            reduce using rule 5 (func -> FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR .)
    SEMI_COLON      reduce using rule 5 (func -> FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR .)


state 125

    (65) expr -> ID LPAREN clist . RPAREN

    RPAREN          shift and go to state 156


state 126

    (27) defvar -> ID DBL_COLON TYPE .
    (28) defvar -> ID DBL_COLON TYPE . EQ expr

    SEMI_COLON      reduce using rule 27 (defvar -> ID DBL_COLON TYPE .)
    EQ              shift and go to state 157


state 127

    (72) assignment -> ID EQ expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 72 (assignment -> ID EQ expr .)
    LSQUAREBR       reduce using rule 72 (assignment -> ID EQ expr .)
    QUESTION        reduce using rule 72 (assignment -> ID EQ expr .)
    PLUS            reduce using rule 72 (assignment -> ID EQ expr .)
    MINUS           reduce using rule 72 (assignment -> ID EQ expr .)
    TIMES           reduce using rule 72 (assignment -> ID EQ expr .)
    DIVIDE          reduce using rule 72 (assignment -> ID EQ expr .)
    GREATER_THAN    reduce using rule 72 (assignment -> ID EQ expr .)
    LESS_THAN       reduce using rule 72 (assignment -> ID EQ expr .)
    EQUAL           reduce using rule 72 (assignment -> ID EQ expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 72 (assignment -> ID EQ expr .)
    LESS_THAN_EQUAL_TO reduce using rule 72 (assignment -> ID EQ expr .)
    NOT_EQUAL       reduce using rule 72 (assignment -> ID EQ expr .)
    OR              reduce using rule 72 (assignment -> ID EQ expr .)
    AND             reduce using rule 72 (assignment -> ID EQ expr .)
    COMMA           reduce using rule 72 (assignment -> ID EQ expr .)
    RSQUAREBR       reduce using rule 72 (assignment -> ID EQ expr .)
    RPAREN          reduce using rule 72 (assignment -> ID EQ expr .)
    COLON           reduce using rule 72 (assignment -> ID EQ expr .)
    TO              reduce using rule 72 (assignment -> ID EQ expr .)
    EQ              shift and go to state 94

  ! EQ              [ reduce using rule 72 (assignment -> ID EQ expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! QUESTION        [ shift and go to state 86 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 128

    (44) expr -> expr LSQUAREBR expr . RSQUAREBR
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    RSQUAREBR       shift and go to state 158
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 129

    (46) expr -> expr QUESTION expr . COLON expr
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    COLON           shift and go to state 159
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 130

    (47) expr -> expr PLUS expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 47 (expr -> expr PLUS expr .)
    LSQUAREBR       reduce using rule 47 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 47 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 47 (expr -> expr PLUS expr .)
    GREATER_THAN    reduce using rule 47 (expr -> expr PLUS expr .)
    LESS_THAN       reduce using rule 47 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 47 (expr -> expr PLUS expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 47 (expr -> expr PLUS expr .)
    LESS_THAN_EQUAL_TO reduce using rule 47 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 47 (expr -> expr PLUS expr .)
    OR              reduce using rule 47 (expr -> expr PLUS expr .)
    AND             reduce using rule 47 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 47 (expr -> expr PLUS expr .)
    RSQUAREBR       reduce using rule 47 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 47 (expr -> expr PLUS expr .)
    COLON           reduce using rule 47 (expr -> expr PLUS expr .)
    TO              reduce using rule 47 (expr -> expr PLUS expr .)
    QUESTION        shift and go to state 86
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 47 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 47 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> expr PLUS expr .) ]
  ! EQ              [ reduce using rule 47 (expr -> expr PLUS expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 131

    (48) expr -> expr MINUS expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 48 (expr -> expr MINUS expr .)
    LSQUAREBR       reduce using rule 48 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 48 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 48 (expr -> expr MINUS expr .)
    GREATER_THAN    reduce using rule 48 (expr -> expr MINUS expr .)
    LESS_THAN       reduce using rule 48 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 48 (expr -> expr MINUS expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 48 (expr -> expr MINUS expr .)
    LESS_THAN_EQUAL_TO reduce using rule 48 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 48 (expr -> expr MINUS expr .)
    OR              reduce using rule 48 (expr -> expr MINUS expr .)
    AND             reduce using rule 48 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 48 (expr -> expr MINUS expr .)
    RSQUAREBR       reduce using rule 48 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 48 (expr -> expr MINUS expr .)
    COLON           reduce using rule 48 (expr -> expr MINUS expr .)
    TO              reduce using rule 48 (expr -> expr MINUS expr .)
    QUESTION        shift and go to state 86
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 48 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 48 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 48 (expr -> expr MINUS expr .) ]
  ! EQ              [ reduce using rule 48 (expr -> expr MINUS expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 132

    (49) expr -> expr TIMES expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 49 (expr -> expr TIMES expr .)
    LSQUAREBR       reduce using rule 49 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 49 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 49 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 49 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 49 (expr -> expr TIMES expr .)
    GREATER_THAN    reduce using rule 49 (expr -> expr TIMES expr .)
    LESS_THAN       reduce using rule 49 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 49 (expr -> expr TIMES expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 49 (expr -> expr TIMES expr .)
    LESS_THAN_EQUAL_TO reduce using rule 49 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 49 (expr -> expr TIMES expr .)
    OR              reduce using rule 49 (expr -> expr TIMES expr .)
    AND             reduce using rule 49 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 49 (expr -> expr TIMES expr .)
    RSQUAREBR       reduce using rule 49 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 49 (expr -> expr TIMES expr .)
    COLON           reduce using rule 49 (expr -> expr TIMES expr .)
    TO              reduce using rule 49 (expr -> expr TIMES expr .)
    QUESTION        shift and go to state 86
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 49 (expr -> expr TIMES expr .) ]
  ! EQ              [ reduce using rule 49 (expr -> expr TIMES expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 133

    (50) expr -> expr DIVIDE expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 50 (expr -> expr DIVIDE expr .)
    LSQUAREBR       reduce using rule 50 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 50 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 50 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 50 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 50 (expr -> expr DIVIDE expr .)
    GREATER_THAN    reduce using rule 50 (expr -> expr DIVIDE expr .)
    LESS_THAN       reduce using rule 50 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 50 (expr -> expr DIVIDE expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 50 (expr -> expr DIVIDE expr .)
    LESS_THAN_EQUAL_TO reduce using rule 50 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 50 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 50 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 50 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 50 (expr -> expr DIVIDE expr .)
    RSQUAREBR       reduce using rule 50 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 50 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 50 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 50 (expr -> expr DIVIDE expr .)
    QUESTION        shift and go to state 86
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 50 (expr -> expr DIVIDE expr .) ]
  ! EQ              [ reduce using rule 50 (expr -> expr DIVIDE expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 134

    (51) expr -> expr GREATER_THAN expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    LSQUAREBR       reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    GREATER_THAN    reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    LESS_THAN       reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    EQUAL           reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    LESS_THAN_EQUAL_TO reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    NOT_EQUAL       reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    OR              reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    AND             reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    RSQUAREBR       reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    RPAREN          reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    COLON           reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    TO              reduce using rule 51 (expr -> expr GREATER_THAN expr .)
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 51 (expr -> expr GREATER_THAN expr .) ]
  ! PLUS            [ reduce using rule 51 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr GREATER_THAN expr .) ]
  ! TIMES           [ reduce using rule 51 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 51 (expr -> expr GREATER_THAN expr .) ]
  ! EQ              [ reduce using rule 51 (expr -> expr GREATER_THAN expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 135

    (52) expr -> expr LESS_THAN expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 52 (expr -> expr LESS_THAN expr .)
    LSQUAREBR       reduce using rule 52 (expr -> expr LESS_THAN expr .)
    GREATER_THAN    reduce using rule 52 (expr -> expr LESS_THAN expr .)
    LESS_THAN       reduce using rule 52 (expr -> expr LESS_THAN expr .)
    EQUAL           reduce using rule 52 (expr -> expr LESS_THAN expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 52 (expr -> expr LESS_THAN expr .)
    LESS_THAN_EQUAL_TO reduce using rule 52 (expr -> expr LESS_THAN expr .)
    NOT_EQUAL       reduce using rule 52 (expr -> expr LESS_THAN expr .)
    OR              reduce using rule 52 (expr -> expr LESS_THAN expr .)
    AND             reduce using rule 52 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 52 (expr -> expr LESS_THAN expr .)
    RSQUAREBR       reduce using rule 52 (expr -> expr LESS_THAN expr .)
    RPAREN          reduce using rule 52 (expr -> expr LESS_THAN expr .)
    COLON           reduce using rule 52 (expr -> expr LESS_THAN expr .)
    TO              reduce using rule 52 (expr -> expr LESS_THAN expr .)
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 52 (expr -> expr LESS_THAN expr .) ]
  ! PLUS            [ reduce using rule 52 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 52 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> expr LESS_THAN expr .) ]
  ! EQ              [ reduce using rule 52 (expr -> expr LESS_THAN expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 136

    (53) expr -> expr EQUAL expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 53 (expr -> expr EQUAL expr .)
    LSQUAREBR       reduce using rule 53 (expr -> expr EQUAL expr .)
    GREATER_THAN    reduce using rule 53 (expr -> expr EQUAL expr .)
    LESS_THAN       reduce using rule 53 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 53 (expr -> expr EQUAL expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 53 (expr -> expr EQUAL expr .)
    LESS_THAN_EQUAL_TO reduce using rule 53 (expr -> expr EQUAL expr .)
    NOT_EQUAL       reduce using rule 53 (expr -> expr EQUAL expr .)
    OR              reduce using rule 53 (expr -> expr EQUAL expr .)
    AND             reduce using rule 53 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 53 (expr -> expr EQUAL expr .)
    RSQUAREBR       reduce using rule 53 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 53 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 53 (expr -> expr EQUAL expr .)
    TO              reduce using rule 53 (expr -> expr EQUAL expr .)
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! EQ              [ reduce using rule 53 (expr -> expr EQUAL expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 137

    (54) expr -> expr EQ expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 54 (expr -> expr EQ expr .)
    LSQUAREBR       reduce using rule 54 (expr -> expr EQ expr .)
    QUESTION        reduce using rule 54 (expr -> expr EQ expr .)
    PLUS            reduce using rule 54 (expr -> expr EQ expr .)
    MINUS           reduce using rule 54 (expr -> expr EQ expr .)
    TIMES           reduce using rule 54 (expr -> expr EQ expr .)
    DIVIDE          reduce using rule 54 (expr -> expr EQ expr .)
    GREATER_THAN    reduce using rule 54 (expr -> expr EQ expr .)
    LESS_THAN       reduce using rule 54 (expr -> expr EQ expr .)
    EQUAL           reduce using rule 54 (expr -> expr EQ expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 54 (expr -> expr EQ expr .)
    LESS_THAN_EQUAL_TO reduce using rule 54 (expr -> expr EQ expr .)
    NOT_EQUAL       reduce using rule 54 (expr -> expr EQ expr .)
    OR              reduce using rule 54 (expr -> expr EQ expr .)
    AND             reduce using rule 54 (expr -> expr EQ expr .)
    COMMA           reduce using rule 54 (expr -> expr EQ expr .)
    RSQUAREBR       reduce using rule 54 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 54 (expr -> expr EQ expr .)
    COLON           reduce using rule 54 (expr -> expr EQ expr .)
    TO              reduce using rule 54 (expr -> expr EQ expr .)
    EQ              shift and go to state 94

  ! EQ              [ reduce using rule 54 (expr -> expr EQ expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! QUESTION        [ shift and go to state 86 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 138

    (55) expr -> expr GREATER_THAN_EQUAL_TO expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    LSQUAREBR       reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    GREATER_THAN    reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    LESS_THAN       reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    EQUAL           reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    LESS_THAN_EQUAL_TO reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    NOT_EQUAL       reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    OR              reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    AND             reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    COMMA           reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    RSQUAREBR       reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    RPAREN          reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    COLON           reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    TO              reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .)
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .) ]
  ! PLUS            [ reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .) ]
  ! TIMES           [ reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .) ]
  ! EQ              [ reduce using rule 55 (expr -> expr GREATER_THAN_EQUAL_TO expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 139

    (56) expr -> expr LESS_THAN_EQUAL_TO expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    LSQUAREBR       reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    GREATER_THAN    reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    LESS_THAN       reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    EQUAL           reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    LESS_THAN_EQUAL_TO reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    NOT_EQUAL       reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    OR              reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    AND             reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    COMMA           reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    RSQUAREBR       reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    RPAREN          reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    COLON           reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    TO              reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .)
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .) ]
  ! PLUS            [ reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .) ]
  ! TIMES           [ reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .) ]
  ! EQ              [ reduce using rule 56 (expr -> expr LESS_THAN_EQUAL_TO expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 140

    (57) expr -> expr NOT_EQUAL expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    LSQUAREBR       reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    GREATER_THAN    reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    LESS_THAN       reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    EQUAL           reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    LESS_THAN_EQUAL_TO reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    COMMA           reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    RSQUAREBR       reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    RPAREN          reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    COLON           reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    TO              reduce using rule 57 (expr -> expr NOT_EQUAL expr .)
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EQ              shift and go to state 94

  ! QUESTION        [ reduce using rule 57 (expr -> expr NOT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 57 (expr -> expr NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr NOT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 57 (expr -> expr NOT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr NOT_EQUAL expr .) ]
  ! EQ              [ reduce using rule 57 (expr -> expr NOT_EQUAL expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 141

    (58) expr -> expr OR expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 58 (expr -> expr OR expr .)
    LSQUAREBR       reduce using rule 58 (expr -> expr OR expr .)
    OR              reduce using rule 58 (expr -> expr OR expr .)
    COMMA           reduce using rule 58 (expr -> expr OR expr .)
    RSQUAREBR       reduce using rule 58 (expr -> expr OR expr .)
    RPAREN          reduce using rule 58 (expr -> expr OR expr .)
    COLON           reduce using rule 58 (expr -> expr OR expr .)
    TO              reduce using rule 58 (expr -> expr OR expr .)
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    AND             shift and go to state 99

  ! QUESTION        [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! EQUAL           [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! GREATER_THAN_EQUAL_TO [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! LESS_THAN_EQUAL_TO [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 58 (expr -> expr OR expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! OR              [ shift and go to state 98 ]


state 142

    (59) expr -> expr AND expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 59 (expr -> expr AND expr .)
    LSQUAREBR       reduce using rule 59 (expr -> expr AND expr .)
    OR              reduce using rule 59 (expr -> expr AND expr .)
    AND             reduce using rule 59 (expr -> expr AND expr .)
    COMMA           reduce using rule 59 (expr -> expr AND expr .)
    RSQUAREBR       reduce using rule 59 (expr -> expr AND expr .)
    RPAREN          reduce using rule 59 (expr -> expr AND expr .)
    COLON           reduce using rule 59 (expr -> expr AND expr .)
    TO              reduce using rule 59 (expr -> expr AND expr .)
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97

  ! QUESTION        [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! EQUAL           [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! GREATER_THAN_EQUAL_TO [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! LESS_THAN_EQUAL_TO [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 59 (expr -> expr AND expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 143

    (15) stmt -> DO stmt WHILE . LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR

    LSQUAREBR       shift and go to state 160


state 144

    (23) while_loop -> WHILE LSQUAREBR LSQUAREBR . expr RSQUAREBR RSQUAREBR stmt
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 161
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 145

    (45) expr -> LSQUAREBR clist RSQUAREBR .

    SEMI_COLON      reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    LSQUAREBR       reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    QUESTION        reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    PLUS            reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    MINUS           reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    TIMES           reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    DIVIDE          reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    GREATER_THAN    reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    LESS_THAN       reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    EQUAL           reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    EQ              reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    GREATER_THAN_EQUAL_TO reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    LESS_THAN_EQUAL_TO reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    NOT_EQUAL       reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    OR              reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    AND             reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    COMMA           reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    RSQUAREBR       reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    RPAREN          reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    COLON           reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)
    TO              reduce using rule 45 (expr -> LSQUAREBR clist RSQUAREBR .)


state 146

    (38) clist -> expr COMMA . clist
    (36) clist -> . empty
    (37) clist -> . expr
    (38) clist -> . expr COMMA clist
    (91) empty -> .
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    RSQUAREBR       reduce using rule 91 (empty -> .)
    RPAREN          reduce using rule 91 (empty -> .)
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 106
    clist                          shift and go to state 162
    empty                          shift and go to state 105
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 147

    (21) single_if -> IF LSQUAREBR LSQUAREBR . expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> IF LSQUAREBR LSQUAREBR . expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 163
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 148

    (24) for_loop -> FOR LPAREN ID . EQ expr TO expr RPAREN stmt

    EQ              shift and go to state 164


state 149

    (25) block -> BEGIN body END .

    DO              reduce using rule 25 (block -> BEGIN body END .)
    error           reduce using rule 25 (block -> BEGIN body END .)
    LSQUAREBR       reduce using rule 25 (block -> BEGIN body END .)
    NOT             reduce using rule 25 (block -> BEGIN body END .)
    PLUS            reduce using rule 25 (block -> BEGIN body END .)
    MINUS           reduce using rule 25 (block -> BEGIN body END .)
    ID              reduce using rule 25 (block -> BEGIN body END .)
    NUMBER          reduce using rule 25 (block -> BEGIN body END .)
    STRING          reduce using rule 25 (block -> BEGIN body END .)
    FN              reduce using rule 25 (block -> BEGIN body END .)
    IF              reduce using rule 25 (block -> BEGIN body END .)
    WHILE           reduce using rule 25 (block -> BEGIN body END .)
    FOR             reduce using rule 25 (block -> BEGIN body END .)
    BEGIN           reduce using rule 25 (block -> BEGIN body END .)
    RETURN          reduce using rule 25 (block -> BEGIN body END .)
    SCAN            reduce using rule 25 (block -> BEGIN body END .)
    PRINT           reduce using rule 25 (block -> BEGIN body END .)
    LIST            reduce using rule 25 (block -> BEGIN body END .)
    LEN             reduce using rule 25 (block -> BEGIN body END .)
    EXIT            reduce using rule 25 (block -> BEGIN body END .)
    RCURLYEBR       reduce using rule 25 (block -> BEGIN body END .)
    END             reduce using rule 25 (block -> BEGIN body END .)
    ELSE            reduce using rule 25 (block -> BEGIN body END .)


state 150

    (39) in_methods -> SCAN LPAREN RPAREN .

    SEMI_COLON      reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    LSQUAREBR       reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    QUESTION        reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    PLUS            reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    MINUS           reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    TIMES           reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    DIVIDE          reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    LESS_THAN       reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    EQUAL           reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    EQ              reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    GREATER_THAN_EQUAL_TO reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    LESS_THAN_EQUAL_TO reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    OR              reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    AND             reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    COMMA           reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    RSQUAREBR       reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    RPAREN          reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    COLON           reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)
    TO              reduce using rule 39 (in_methods -> SCAN LPAREN RPAREN .)


state 151

    (40) in_methods -> PRINT LPAREN clist . RPAREN

    RPAREN          shift and go to state 165


state 152

    (41) in_methods -> LIST LPAREN clist . RPAREN

    RPAREN          shift and go to state 166


state 153

    (42) in_methods -> LEN LPAREN clist . RPAREN

    RPAREN          shift and go to state 167


state 154

    (43) in_methods -> EXIT LPAREN clist . RPAREN

    RPAREN          shift and go to state 168


state 155

    (4) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr . SEMI_COLON
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 169
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 156

    (65) expr -> ID LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    LSQUAREBR       reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    QUESTION        reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    PLUS            reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    MINUS           reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    TIMES           reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    EQUAL           reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    EQ              reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    GREATER_THAN_EQUAL_TO reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    LESS_THAN_EQUAL_TO reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    NOT_EQUAL       reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    OR              reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    AND             reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    COMMA           reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    RSQUAREBR       reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    RPAREN          reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    COLON           reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)
    TO              reduce using rule 65 (expr -> ID LPAREN clist RPAREN .)


state 157

    (28) defvar -> ID DBL_COLON TYPE EQ . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 170
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 158

    (44) expr -> expr LSQUAREBR expr RSQUAREBR .

    SEMI_COLON      reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LSQUAREBR       reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    QUESTION        reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    PLUS            reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    MINUS           reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    TIMES           reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    DIVIDE          reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_THAN    reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_THAN       reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    EQUAL           reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    EQ              reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_THAN_EQUAL_TO reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_THAN_EQUAL_TO reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    NOT_EQUAL       reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    OR              reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    AND             reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COMMA           reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RSQUAREBR       reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RPAREN          reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COLON           reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    TO              reduce using rule 44 (expr -> expr LSQUAREBR expr RSQUAREBR .)


state 159

    (46) expr -> expr QUESTION expr COLON . expr
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 171
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 160

    (15) stmt -> DO stmt WHILE LSQUAREBR . LSQUAREBR expr RSQUAREBR RSQUAREBR

    LSQUAREBR       shift and go to state 172


state 161

    (23) while_loop -> WHILE LSQUAREBR LSQUAREBR expr . RSQUAREBR RSQUAREBR stmt
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    RSQUAREBR       shift and go to state 173
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 162

    (38) clist -> expr COMMA clist .

    RSQUAREBR       reduce using rule 38 (clist -> expr COMMA clist .)
    RPAREN          reduce using rule 38 (clist -> expr COMMA clist .)


state 163

    (21) single_if -> IF LSQUAREBR LSQUAREBR expr . RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> IF LSQUAREBR LSQUAREBR expr . RSQUAREBR RSQUAREBR stmt ELSE stmt
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    RSQUAREBR       shift and go to state 174
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 164

    (24) for_loop -> FOR LPAREN ID EQ . expr TO expr RPAREN stmt
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 175
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 165

    (40) in_methods -> PRINT LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    LSQUAREBR       reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    QUESTION        reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    PLUS            reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    MINUS           reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    TIMES           reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    EQUAL           reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    EQ              reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    GREATER_THAN_EQUAL_TO reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    LESS_THAN_EQUAL_TO reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    NOT_EQUAL       reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    OR              reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    AND             reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    COMMA           reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    RSQUAREBR       reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    RPAREN          reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    COLON           reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)
    TO              reduce using rule 40 (in_methods -> PRINT LPAREN clist RPAREN .)


state 166

    (41) in_methods -> LIST LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    LSQUAREBR       reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    QUESTION        reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    PLUS            reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    MINUS           reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    TIMES           reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    EQUAL           reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    EQ              reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    GREATER_THAN_EQUAL_TO reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    LESS_THAN_EQUAL_TO reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    NOT_EQUAL       reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    OR              reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    AND             reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    COMMA           reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    RSQUAREBR       reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    RPAREN          reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    COLON           reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)
    TO              reduce using rule 41 (in_methods -> LIST LPAREN clist RPAREN .)


state 167

    (42) in_methods -> LEN LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    LSQUAREBR       reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    QUESTION        reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    PLUS            reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    MINUS           reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    TIMES           reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    EQUAL           reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    EQ              reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    GREATER_THAN_EQUAL_TO reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    LESS_THAN_EQUAL_TO reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    NOT_EQUAL       reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    OR              reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    AND             reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    COMMA           reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    RSQUAREBR       reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    RPAREN          reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    COLON           reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)
    TO              reduce using rule 42 (in_methods -> LEN LPAREN clist RPAREN .)


state 168

    (43) in_methods -> EXIT LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    LSQUAREBR       reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    QUESTION        reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    PLUS            reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    MINUS           reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    TIMES           reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    EQUAL           reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    EQ              reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    GREATER_THAN_EQUAL_TO reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    LESS_THAN_EQUAL_TO reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    NOT_EQUAL       reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    OR              reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    AND             reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    COMMA           reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    RSQUAREBR       reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    RPAREN          reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    COLON           reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)
    TO              reduce using rule 43 (in_methods -> EXIT LPAREN clist RPAREN .)


state 169

    (4) func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON .

    FN              reduce using rule 4 (func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON .)
    $end            reduce using rule 4 (func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON .)
    SEMI_COLON      reduce using rule 4 (func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON .)


state 170

    (28) defvar -> ID DBL_COLON TYPE EQ expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 28 (defvar -> ID DBL_COLON TYPE EQ expr .)
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 171

    (46) expr -> expr QUESTION expr COLON expr .
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    LSQUAREBR       reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    QUESTION        reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    PLUS            reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    MINUS           reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    TIMES           reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    DIVIDE          reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    GREATER_THAN    reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    LESS_THAN       reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    EQUAL           reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    GREATER_THAN_EQUAL_TO reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    LESS_THAN_EQUAL_TO reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    NOT_EQUAL       reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    OR              reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    AND             reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    COMMA           reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    RSQUAREBR       reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    RPAREN          reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    COLON           reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    TO              reduce using rule 46 (expr -> expr QUESTION expr COLON expr .)
    EQ              shift and go to state 94

  ! EQ              [ reduce using rule 46 (expr -> expr QUESTION expr COLON expr .) ]
  ! LSQUAREBR       [ shift and go to state 85 ]
  ! QUESTION        [ shift and go to state 86 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! GREATER_THAN    [ shift and go to state 91 ]
  ! LESS_THAN       [ shift and go to state 92 ]
  ! EQUAL           [ shift and go to state 93 ]
  ! GREATER_THAN_EQUAL_TO [ shift and go to state 95 ]
  ! LESS_THAN_EQUAL_TO [ shift and go to state 96 ]
  ! NOT_EQUAL       [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]


state 172

    (15) stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR . expr RSQUAREBR RSQUAREBR
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 176
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 173

    (23) while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR . RSQUAREBR stmt

    RSQUAREBR       shift and go to state 177


state 174

    (21) single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR . RSQUAREBR stmt
    (22) if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR . RSQUAREBR stmt ELSE stmt

    RSQUAREBR       shift and go to state 178


state 175

    (24) for_loop -> FOR LPAREN ID EQ expr . TO expr RPAREN stmt
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    TO              shift and go to state 179
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 176

    (15) stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr . RSQUAREBR RSQUAREBR
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    RSQUAREBR       shift and go to state 180
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 177

    (23) while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR . stmt
    (9) stmt -> . expr SEMI_COLON
    (10) stmt -> . defvar SEMI_COLON
    (11) stmt -> . func SEMI_COLON
    (12) stmt -> . single_if
    (13) stmt -> . if_with_else
    (14) stmt -> . while_loop
    (15) stmt -> . DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (16) stmt -> . for_loop
    (17) stmt -> . block
    (18) stmt -> . return_instr SEMI_COLON
    (19) stmt -> . error SEMI_COLON
    (20) stmt -> . error
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (27) defvar -> . ID DBL_COLON TYPE
    (28) defvar -> . ID DBL_COLON TYPE EQ expr
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (21) single_if -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (23) while_loop -> . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (24) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (25) block -> . BEGIN body END
    (26) return_instr -> . RETURN expr
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    DO              shift and go to state 53
    error           shift and go to state 59
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 43
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    FN              shift and go to state 4
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 69
    BEGIN           shift and go to state 70
    RETURN          shift and go to state 67
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 47
    stmt                           shift and go to state 181
    defvar                         shift and go to state 48
    func                           shift and go to state 49
    single_if                      shift and go to state 50
    if_with_else                   shift and go to state 51
    while_loop                     shift and go to state 52
    for_loop                       shift and go to state 56
    block                          shift and go to state 57
    return_instr                   shift and go to state 58
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 178

    (21) single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR . stmt
    (22) if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR . stmt ELSE stmt
    (9) stmt -> . expr SEMI_COLON
    (10) stmt -> . defvar SEMI_COLON
    (11) stmt -> . func SEMI_COLON
    (12) stmt -> . single_if
    (13) stmt -> . if_with_else
    (14) stmt -> . while_loop
    (15) stmt -> . DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (16) stmt -> . for_loop
    (17) stmt -> . block
    (18) stmt -> . return_instr SEMI_COLON
    (19) stmt -> . error SEMI_COLON
    (20) stmt -> . error
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (27) defvar -> . ID DBL_COLON TYPE
    (28) defvar -> . ID DBL_COLON TYPE EQ expr
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (21) single_if -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (23) while_loop -> . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (24) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (25) block -> . BEGIN body END
    (26) return_instr -> . RETURN expr
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    DO              shift and go to state 53
    error           shift and go to state 59
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 43
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    FN              shift and go to state 4
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 69
    BEGIN           shift and go to state 70
    RETURN          shift and go to state 67
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 47
    stmt                           shift and go to state 182
    defvar                         shift and go to state 48
    func                           shift and go to state 49
    single_if                      shift and go to state 50
    if_with_else                   shift and go to state 51
    while_loop                     shift and go to state 52
    for_loop                       shift and go to state 56
    block                          shift and go to state 57
    return_instr                   shift and go to state 58
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 179

    (24) for_loop -> FOR LPAREN ID EQ expr TO . expr RPAREN stmt
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 107
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 183
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 180

    (15) stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR . RSQUAREBR

    RSQUAREBR       shift and go to state 184


state 181

    (23) while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .

    DO              reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    error           reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    LSQUAREBR       reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    NOT             reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    PLUS            reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    MINUS           reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    ID              reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    NUMBER          reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    STRING          reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    FN              reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    IF              reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    WHILE           reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    FOR             reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    BEGIN           reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    RETURN          reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    SCAN            reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    PRINT           reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    LIST            reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    LEN             reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    EXIT            reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    RCURLYEBR       reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    END             reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    ELSE            reduce using rule 23 (while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)


state 182

    (21) single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .
    (22) if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt . ELSE stmt

  ! shift/reduce conflict for ELSE resolved as shift
    DO              reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    error           reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    LSQUAREBR       reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    NOT             reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    PLUS            reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    MINUS           reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    ID              reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    NUMBER          reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    STRING          reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    FN              reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    IF              reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    WHILE           reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    FOR             reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    BEGIN           reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    RETURN          reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    SCAN            reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    PRINT           reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    LIST            reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    LEN             reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    EXIT            reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    RCURLYEBR       reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    END             reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .)
    ELSE            shift and go to state 185

  ! ELSE            [ reduce using rule 21 (single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt .) ]


state 183

    (24) for_loop -> FOR LPAREN ID EQ expr TO expr . RPAREN stmt
    (44) expr -> expr . LSQUAREBR expr RSQUAREBR
    (46) expr -> expr . QUESTION expr COLON expr
    (47) expr -> expr . PLUS expr
    (48) expr -> expr . MINUS expr
    (49) expr -> expr . TIMES expr
    (50) expr -> expr . DIVIDE expr
    (51) expr -> expr . GREATER_THAN expr
    (52) expr -> expr . LESS_THAN expr
    (53) expr -> expr . EQUAL expr
    (54) expr -> expr . EQ expr
    (55) expr -> expr . GREATER_THAN_EQUAL_TO expr
    (56) expr -> expr . LESS_THAN_EQUAL_TO expr
    (57) expr -> expr . NOT_EQUAL expr
    (58) expr -> expr . OR expr
    (59) expr -> expr . AND expr

    RPAREN          shift and go to state 186
    LSQUAREBR       shift and go to state 85
    QUESTION        shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    EQUAL           shift and go to state 93
    EQ              shift and go to state 94
    GREATER_THAN_EQUAL_TO shift and go to state 95
    LESS_THAN_EQUAL_TO shift and go to state 96
    NOT_EQUAL       shift and go to state 97
    OR              shift and go to state 98
    AND             shift and go to state 99


state 184

    (15) stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .

    DO              reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    error           reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    LSQUAREBR       reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    NOT             reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    PLUS            reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    MINUS           reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    ID              reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    NUMBER          reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    STRING          reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    FN              reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    IF              reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    WHILE           reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    FOR             reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    BEGIN           reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    RETURN          reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    SCAN            reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    PRINT           reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    LIST            reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    LEN             reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    EXIT            reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    RCURLYEBR       reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    END             reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)
    ELSE            reduce using rule 15 (stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR .)


state 185

    (22) if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE . stmt
    (9) stmt -> . expr SEMI_COLON
    (10) stmt -> . defvar SEMI_COLON
    (11) stmt -> . func SEMI_COLON
    (12) stmt -> . single_if
    (13) stmt -> . if_with_else
    (14) stmt -> . while_loop
    (15) stmt -> . DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (16) stmt -> . for_loop
    (17) stmt -> . block
    (18) stmt -> . return_instr SEMI_COLON
    (19) stmt -> . error SEMI_COLON
    (20) stmt -> . error
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (27) defvar -> . ID DBL_COLON TYPE
    (28) defvar -> . ID DBL_COLON TYPE EQ expr
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (21) single_if -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (23) while_loop -> . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (24) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (25) block -> . BEGIN body END
    (26) return_instr -> . RETURN expr
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    DO              shift and go to state 53
    error           shift and go to state 59
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 43
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    FN              shift and go to state 4
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 69
    BEGIN           shift and go to state 70
    RETURN          shift and go to state 67
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 47
    stmt                           shift and go to state 187
    defvar                         shift and go to state 48
    func                           shift and go to state 49
    single_if                      shift and go to state 50
    if_with_else                   shift and go to state 51
    while_loop                     shift and go to state 52
    for_loop                       shift and go to state 56
    block                          shift and go to state 57
    return_instr                   shift and go to state 58
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 186

    (24) for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN . stmt
    (9) stmt -> . expr SEMI_COLON
    (10) stmt -> . defvar SEMI_COLON
    (11) stmt -> . func SEMI_COLON
    (12) stmt -> . single_if
    (13) stmt -> . if_with_else
    (14) stmt -> . while_loop
    (15) stmt -> . DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR
    (16) stmt -> . for_loop
    (17) stmt -> . block
    (18) stmt -> . return_instr SEMI_COLON
    (19) stmt -> . error SEMI_COLON
    (20) stmt -> . error
    (44) expr -> . expr LSQUAREBR expr RSQUAREBR
    (45) expr -> . LSQUAREBR clist RSQUAREBR
    (46) expr -> . expr QUESTION expr COLON expr
    (47) expr -> . expr PLUS expr
    (48) expr -> . expr MINUS expr
    (49) expr -> . expr TIMES expr
    (50) expr -> . expr DIVIDE expr
    (51) expr -> . expr GREATER_THAN expr
    (52) expr -> . expr LESS_THAN expr
    (53) expr -> . expr EQUAL expr
    (54) expr -> . expr EQ expr
    (55) expr -> . expr GREATER_THAN_EQUAL_TO expr
    (56) expr -> . expr LESS_THAN_EQUAL_TO expr
    (57) expr -> . expr NOT_EQUAL expr
    (58) expr -> . expr OR expr
    (59) expr -> . expr AND expr
    (60) expr -> . NOT expr
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ID
    (64) expr -> . assignment
    (65) expr -> . ID LPAREN clist RPAREN
    (66) expr -> . NUMBER
    (67) expr -> . in_methods
    (68) expr -> . STRING
    (27) defvar -> . ID DBL_COLON TYPE
    (28) defvar -> . ID DBL_COLON TYPE EQ expr
    (3) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (4) func -> . FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON
    (5) func -> . FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR
    (6) func -> . FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR
    (21) single_if -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (22) if_with_else -> . IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt
    (23) while_loop -> . WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt
    (24) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (25) block -> . BEGIN body END
    (26) return_instr -> . RETURN expr
    (72) assignment -> . ID EQ expr
    (39) in_methods -> . SCAN LPAREN RPAREN
    (40) in_methods -> . PRINT LPAREN clist RPAREN
    (41) in_methods -> . LIST LPAREN clist RPAREN
    (42) in_methods -> . LEN LPAREN clist RPAREN
    (43) in_methods -> . EXIT LPAREN clist RPAREN

    DO              shift and go to state 53
    error           shift and go to state 59
    LSQUAREBR       shift and go to state 55
    NOT             shift and go to state 62
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 43
    NUMBER          shift and go to state 64
    STRING          shift and go to state 66
    FN              shift and go to state 4
    IF              shift and go to state 68
    WHILE           shift and go to state 54
    FOR             shift and go to state 69
    BEGIN           shift and go to state 70
    RETURN          shift and go to state 67
    SCAN            shift and go to state 71
    PRINT           shift and go to state 72
    LIST            shift and go to state 73
    LEN             shift and go to state 74
    EXIT            shift and go to state 75

    expr                           shift and go to state 47
    stmt                           shift and go to state 188
    defvar                         shift and go to state 48
    func                           shift and go to state 49
    single_if                      shift and go to state 50
    if_with_else                   shift and go to state 51
    while_loop                     shift and go to state 52
    for_loop                       shift and go to state 56
    block                          shift and go to state 57
    return_instr                   shift and go to state 58
    assignment                     shift and go to state 63
    in_methods                     shift and go to state 65

state 187

    (22) if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .

    DO              reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    error           reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    LSQUAREBR       reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    NOT             reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    PLUS            reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    MINUS           reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    ID              reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    NUMBER          reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    STRING          reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    FN              reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    IF              reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    WHILE           reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    FOR             reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    BEGIN           reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    RETURN          reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    SCAN            reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    PRINT           reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    LIST            reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    LEN             reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    EXIT            reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    RCURLYEBR       reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    END             reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)
    ELSE            reduce using rule 22 (if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt .)


state 188

    (24) for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .

    DO              reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    error           reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    LSQUAREBR       reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    NOT             reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    PLUS            reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    MINUS           reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    ID              reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    NUMBER          reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    STRING          reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    FN              reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    IF              reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    WHILE           reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    FOR             reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    BEGIN           reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    RETURN          reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    SCAN            reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    PRINT           reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    LIST            reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    LEN             reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    EXIT            reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    RCURLYEBR       reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    END             reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    ELSE            reduce using rule 24 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQ in state 43 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 182 resolved as shift
