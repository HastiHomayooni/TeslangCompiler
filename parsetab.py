
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftORANDleftEQUALNOT_EQUALGREATER_THANLESS_THANGREATER_THAN_EQUAL_TOLESS_THAN_EQUAL_TOleftPLUSMINUSleftTIMESDIVIDEMODleftQUESTIONCOLONleftCOMMArightEQNOTAND AS BEGIN BOOLEAN COLON COMMA COMMENT DBL_COLON DIVIDE DO ELSE END EQ EQUAL EXIT FN FOR GREATER_THAN GREATER_THAN_EQUAL_TO ID IF INT LCURLYEBR LEN LESS_THAN LESS_THAN_EQUAL_TO LIST LPAREN LSQUAREBR MINUS MOD NOT NOT_EQUAL NULL NUMBER OR PLUS PRINT QUESTION RCURLYEBR RETURN RPAREN RSQUAREBR SCAN SEMI_COLON STR STRING TIMES TO TYPE VECTOR WHILEprog : empty\n                | func progfunc : FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR\n                | FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLONfunc : FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBRfunc : FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBRbody : empty \n                | stmt bodystmt : expr SEMI_COLON\n                | defvar SEMI_COLON\n                | func SEMI_COLON\n                | single_if\n                | if_with_else\n                | while_loop\n                | DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR \n                | for_loop\n                | block\n                | return_instr SEMI_COLONstmt : error SEMI_COLON\n                | errorsingle_if : IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmtif_with_else : IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmtwhile_loop : WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmtfor_loop : FOR LPAREN ID EQ expr TO expr RPAREN stmtblock : BEGIN body ENDreturn_instr : RETURN exprdefvar : ID DBL_COLON TYPE \n               | ID DBL_COLON TYPE EQ exprflist : empty\n              | ID AS TYPE \n              | ID AS TYPE COMMA flistflist : error AS TYPE COMMA flist\n                 | ID error TYPE COMMA flist\n                 | ID AS error COMMA flist\n                 | ID AS TYPE COMMA errorclist : empty\n                 | expr\n                 | expr COMMA clistin_methods : SCAN LPAREN RPAREN\n                        | PRINT LPAREN clist RPAREN\n                        | LIST LPAREN clist RPAREN\n                        | LEN LPAREN clist RPAREN\n                        | EXIT LPAREN clist RPARENexpr : expr LSQUAREBR expr RSQUAREBR\n            | LSQUAREBR clist RSQUAREBR\n            | expr QUESTION expr COLON expr \n            | expr PLUS expr \n            | expr MINUS expr \n            | expr TIMES expr \n            | expr DIVIDE expr \n            | expr GREATER_THAN expr \n            | expr LESS_THAN expr \n            | expr EQUAL expr \n            | expr EQ expr \n            | expr GREATER_THAN_EQUAL_TO expr \n            | expr LESS_THAN_EQUAL_TO expr \n            | expr NOT_EQUAL expr \n            | expr OR expr \n            | expr AND expr \n            | NOT expr \n            | PLUS expr \n            | MINUS expr \n            | ID \n            | assignment\n            | ID LPAREN clist RPAREN\n            | NUMBER\n            | in_methods\n            | STRINGexpr_list : LSQUAREBR clist RSQUAREBRoperation_on_list : expr LSQUAREBR expr RSQUAREBR\n                            | ID LSQUAREBR expr RSQUAREBRassignment : ID EQ exprternary_expr : expr QUESTION expr COLON expr  function_call : ID LPAREN clist RPARENfunction_call : ID LPAREN error RPARENbinary_expr : expr PLUS expr                   \n                       | expr MINUS expr                  \n                       | expr TIMES expr                  \n                       | expr DIVIDE expr                 \n                       | expr MOD expr                 \n                       | expr GREATER_THAN expr\n                        | expr GREATER_THAN_EQUAL_TO expr\n                        | expr LESS_THAN expr\n                        | expr LESS_THAN_EQUAL_TO expr\n                        | expr EQ expr\n                        | expr EQUAL expr\n                        | expr NOT expr\n                        | expr NOT_EQUAL expr\n                        | expr OR expr\n                        | expr AND exprempty :'
    
_lr_action_items = {'$end':([0,1,2,3,5,82,123,124,169,],[-91,0,-1,-91,-2,-3,-6,-5,-4,]),'FN':([0,3,39,41,42,46,50,51,52,53,56,57,59,70,82,84,100,101,108,109,123,124,149,169,177,178,181,182,184,185,186,187,188,],[4,4,4,4,4,4,-12,-13,-14,4,-16,-17,-20,4,-3,-9,-10,-11,-18,-19,-6,-5,-25,-4,4,4,-23,-21,-15,4,4,-22,-24,]),'ID':([4,7,23,24,25,29,39,41,42,46,50,51,52,53,55,56,57,59,60,61,62,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,115,118,119,120,121,122,144,146,147,149,157,159,164,172,177,178,179,181,182,184,185,186,187,188,],[6,8,8,8,8,8,43,43,43,43,-12,-13,-14,43,107,-16,-17,-20,107,107,107,107,43,107,107,-9,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-10,-11,-18,-19,148,107,107,107,107,107,107,107,107,-25,107,107,107,107,43,43,107,-23,-21,-15,43,43,-22,-24,]),'LPAREN':([6,43,69,71,72,73,74,75,107,],[7,79,115,117,118,119,120,121,79,]),'error':([7,8,12,20,23,24,25,29,39,41,42,46,50,51,52,53,56,57,59,70,84,100,101,108,109,149,177,178,181,182,184,185,186,187,188,],[10,13,18,27,31,32,32,32,59,59,59,59,-12,-13,-14,59,-16,-17,-20,59,-9,-10,-11,-18,-19,-25,59,59,-23,-21,-15,59,59,-22,-24,]),'RPAREN':([7,9,10,11,17,23,24,25,29,30,31,33,34,38,63,64,65,66,79,105,106,107,110,111,112,117,118,119,120,121,125,127,130,131,132,133,134,135,136,137,138,139,140,141,142,145,146,150,151,152,153,154,156,158,162,165,166,167,168,171,183,],[-91,14,15,-29,-30,-91,-91,-91,-91,-31,-35,-34,-33,-32,-64,-66,-67,-68,-91,-36,-37,-63,-61,-62,-60,150,-91,-91,-91,-91,156,-72,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,-91,-39,165,166,167,168,-65,-44,-38,-40,-41,-42,-43,-46,186,]),'AS':([8,10,31,32,],[12,16,16,16,]),'TYPE':([12,13,16,20,21,80,],[17,19,22,26,28,126,]),'LESS_THAN':([14,15,43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[20,21,-63,92,-64,-66,-67,-68,92,-63,-61,-62,-60,92,-72,92,92,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,92,92,-45,-39,92,-65,-44,92,92,-40,-41,-42,-43,92,-46,92,92,92,]),'COMMA':([17,18,19,22,63,64,65,66,106,107,110,111,112,127,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,156,158,165,166,167,168,171,],[23,24,25,29,-64,-66,-67,-68,146,-63,-61,-62,-60,-72,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,-39,-65,-44,-40,-41,-42,-43,-46,]),'GREATER_THAN':([26,27,28,40,43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[35,36,37,76,-63,91,-64,-66,-67,-68,91,-63,-61,-62,-60,91,-72,91,91,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,91,91,-45,-39,91,-65,-44,91,91,-40,-41,-42,-43,91,-46,91,91,91,]),'LCURLYEBR':([35,36,37,],[39,41,42,]),'EQ':([35,43,47,63,64,65,66,106,107,110,111,112,113,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,148,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[40,81,94,-64,-66,-67,-68,94,81,94,94,94,94,157,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-45,164,-39,94,-65,-44,94,94,-40,-41,-42,-43,94,94,94,94,94,]),'RCURLYEBR':([39,41,42,44,45,46,50,51,52,56,57,59,77,78,83,84,100,101,108,109,149,181,182,184,187,188,],[-91,-91,-91,82,-7,-91,-12,-13,-14,-16,-17,-20,123,124,-8,-9,-10,-11,-18,-19,-25,-23,-21,-15,-22,-24,]),'DO':([39,41,42,46,50,51,52,53,56,57,59,70,84,100,101,108,109,149,177,178,181,182,184,185,186,187,188,],[53,53,53,53,-12,-13,-14,53,-16,-17,-20,53,-9,-10,-11,-18,-19,-25,53,53,-23,-21,-15,53,53,-22,-24,]),'LSQUAREBR':([39,41,42,43,46,47,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,106,107,108,109,110,111,112,113,114,118,119,120,121,122,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,155,156,157,158,159,160,161,163,164,165,166,167,168,170,171,172,175,176,177,178,179,181,182,183,184,185,186,187,188,],[55,55,55,-63,55,85,-12,-13,-14,55,103,55,-16,-17,-20,55,55,55,-64,-66,-67,-68,55,114,55,55,55,-9,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-10,-11,144,85,-63,-18,-19,-61,-62,-60,85,147,55,55,55,55,55,-72,85,85,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,160,55,-45,55,55,-25,-39,85,-65,55,-44,55,172,85,85,55,-40,-41,-42,-43,85,-46,55,85,85,55,55,55,-23,-21,85,-15,55,55,-22,-24,]),'NOT':([39,41,42,46,50,51,52,53,55,56,57,59,60,61,62,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,118,119,120,121,122,144,146,147,149,157,159,164,172,177,178,179,181,182,184,185,186,187,188,],[62,62,62,62,-12,-13,-14,62,62,-16,-17,-20,62,62,62,62,62,62,62,-9,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-10,-11,-18,-19,62,62,62,62,62,62,62,62,-25,62,62,62,62,62,62,62,-23,-21,-15,62,62,-22,-24,]),'PLUS':([39,41,42,43,46,47,50,51,52,53,55,56,57,59,60,61,62,63,64,65,66,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,107,108,109,110,111,112,113,118,119,120,121,122,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,149,150,155,156,157,158,159,161,163,164,165,166,167,168,170,171,172,175,176,177,178,179,181,182,183,184,185,186,187,188,],[60,60,60,-63,60,87,-12,-13,-14,60,60,-16,-17,-20,60,60,60,-64,-66,-67,-68,60,60,60,60,-9,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-10,-11,87,-63,-18,-19,-61,-62,-60,87,60,60,60,60,60,-72,87,87,-47,-48,-49,-50,87,87,87,-54,87,87,87,87,87,60,-45,60,60,-25,-39,87,-65,60,-44,60,87,87,60,-40,-41,-42,-43,87,-46,60,87,87,60,60,60,-23,-21,87,-15,60,60,-22,-24,]),'MINUS':([39,41,42,43,46,47,50,51,52,53,55,56,57,59,60,61,62,63,64,65,66,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,107,108,109,110,111,112,113,118,119,120,121,122,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,149,150,155,156,157,158,159,161,163,164,165,166,167,168,170,171,172,175,176,177,178,179,181,182,183,184,185,186,187,188,],[61,61,61,-63,61,88,-12,-13,-14,61,61,-16,-17,-20,61,61,61,-64,-66,-67,-68,61,61,61,61,-9,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-10,-11,88,-63,-18,-19,-61,-62,-60,88,61,61,61,61,61,-72,88,88,-47,-48,-49,-50,88,88,88,-54,88,88,88,88,88,61,-45,61,61,-25,-39,88,-65,61,-44,61,88,88,61,-40,-41,-42,-43,88,-46,61,88,88,61,61,61,-23,-21,88,-15,61,61,-22,-24,]),'NUMBER':([39,41,42,46,50,51,52,53,55,56,57,59,60,61,62,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,118,119,120,121,122,144,146,147,149,157,159,164,172,177,178,179,181,182,184,185,186,187,188,],[64,64,64,64,-12,-13,-14,64,64,-16,-17,-20,64,64,64,64,64,64,64,-9,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-10,-11,-18,-19,64,64,64,64,64,64,64,64,-25,64,64,64,64,64,64,64,-23,-21,-15,64,64,-22,-24,]),'STRING':([39,41,42,46,50,51,52,53,55,56,57,59,60,61,62,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,118,119,120,121,122,144,146,147,149,157,159,164,172,177,178,179,181,182,184,185,186,187,188,],[66,66,66,66,-12,-13,-14,66,66,-16,-17,-20,66,66,66,66,66,66,66,-9,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-10,-11,-18,-19,66,66,66,66,66,66,66,66,-25,66,66,66,66,66,66,66,-23,-21,-15,66,66,-22,-24,]),'IF':([39,41,42,46,50,51,52,53,56,57,59,70,84,100,101,108,109,149,177,178,181,182,184,185,186,187,188,],[68,68,68,68,-12,-13,-14,68,-16,-17,-20,68,-9,-10,-11,-18,-19,-25,68,68,-23,-21,-15,68,68,-22,-24,]),'WHILE':([39,41,42,46,50,51,52,53,56,57,59,70,84,100,101,102,108,109,149,177,178,181,182,184,185,186,187,188,],[54,54,54,54,-12,-13,-14,54,-16,-17,-20,54,-9,-10,-11,143,-18,-19,-25,54,54,-23,-21,-15,54,54,-22,-24,]),'FOR':([39,41,42,46,50,51,52,53,56,57,59,70,84,100,101,108,109,149,177,178,181,182,184,185,186,187,188,],[69,69,69,69,-12,-13,-14,69,-16,-17,-20,69,-9,-10,-11,-18,-19,-25,69,69,-23,-21,-15,69,69,-22,-24,]),'BEGIN':([39,41,42,46,50,51,52,53,56,57,59,70,84,100,101,108,109,149,177,178,181,182,184,185,186,187,188,],[70,70,70,70,-12,-13,-14,70,-16,-17,-20,70,-9,-10,-11,-18,-19,-25,70,70,-23,-21,-15,70,70,-22,-24,]),'RETURN':([39,41,42,46,50,51,52,53,56,57,59,70,76,84,100,101,108,109,149,177,178,181,182,184,185,186,187,188,],[67,67,67,67,-12,-13,-14,67,-16,-17,-20,67,122,-9,-10,-11,-18,-19,-25,67,67,-23,-21,-15,67,67,-22,-24,]),'SCAN':([39,41,42,46,50,51,52,53,55,56,57,59,60,61,62,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,118,119,120,121,122,144,146,147,149,157,159,164,172,177,178,179,181,182,184,185,186,187,188,],[71,71,71,71,-12,-13,-14,71,71,-16,-17,-20,71,71,71,71,71,71,71,-9,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-10,-11,-18,-19,71,71,71,71,71,71,71,71,-25,71,71,71,71,71,71,71,-23,-21,-15,71,71,-22,-24,]),'PRINT':([39,41,42,46,50,51,52,53,55,56,57,59,60,61,62,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,118,119,120,121,122,144,146,147,149,157,159,164,172,177,178,179,181,182,184,185,186,187,188,],[72,72,72,72,-12,-13,-14,72,72,-16,-17,-20,72,72,72,72,72,72,72,-9,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-10,-11,-18,-19,72,72,72,72,72,72,72,72,-25,72,72,72,72,72,72,72,-23,-21,-15,72,72,-22,-24,]),'LIST':([39,41,42,46,50,51,52,53,55,56,57,59,60,61,62,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,118,119,120,121,122,144,146,147,149,157,159,164,172,177,178,179,181,182,184,185,186,187,188,],[73,73,73,73,-12,-13,-14,73,73,-16,-17,-20,73,73,73,73,73,73,73,-9,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-10,-11,-18,-19,73,73,73,73,73,73,73,73,-25,73,73,73,73,73,73,73,-23,-21,-15,73,73,-22,-24,]),'LEN':([39,41,42,46,50,51,52,53,55,56,57,59,60,61,62,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,118,119,120,121,122,144,146,147,149,157,159,164,172,177,178,179,181,182,184,185,186,187,188,],[74,74,74,74,-12,-13,-14,74,74,-16,-17,-20,74,74,74,74,74,74,74,-9,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-10,-11,-18,-19,74,74,74,74,74,74,74,74,-25,74,74,74,74,74,74,74,-23,-21,-15,74,74,-22,-24,]),'EXIT':([39,41,42,46,50,51,52,53,55,56,57,59,60,61,62,67,70,79,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,118,119,120,121,122,144,146,147,149,157,159,164,172,177,178,179,181,182,184,185,186,187,188,],[75,75,75,75,-12,-13,-14,75,75,-16,-17,-20,75,75,75,75,75,75,75,-9,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-10,-11,-18,-19,75,75,75,75,75,75,75,75,-25,75,75,75,75,75,75,75,-23,-21,-15,75,75,-22,-24,]),'SEMI_COLON':([43,47,48,49,58,59,63,64,65,66,82,107,110,111,112,113,123,124,126,127,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,165,166,167,168,169,170,171,],[-63,84,100,101,108,109,-64,-66,-67,-68,-3,-63,-61,-62,-60,-26,-6,-5,-27,-72,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,-39,169,-65,-44,-40,-41,-42,-43,-4,-28,-46,]),'QUESTION':([43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[-63,86,-64,-66,-67,-68,86,-63,86,86,-60,86,-72,86,86,86,86,86,86,86,86,86,-54,86,86,86,86,86,-45,-39,86,-65,-44,86,86,-40,-41,-42,-43,86,-46,86,86,86,]),'TIMES':([43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[-63,89,-64,-66,-67,-68,89,-63,89,89,-60,89,-72,89,89,89,89,-49,-50,89,89,89,-54,89,89,89,89,89,-45,-39,89,-65,-44,89,89,-40,-41,-42,-43,89,-46,89,89,89,]),'DIVIDE':([43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[-63,90,-64,-66,-67,-68,90,-63,90,90,-60,90,-72,90,90,90,90,-49,-50,90,90,90,-54,90,90,90,90,90,-45,-39,90,-65,-44,90,90,-40,-41,-42,-43,90,-46,90,90,90,]),'EQUAL':([43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[-63,93,-64,-66,-67,-68,93,-63,-61,-62,-60,93,-72,93,93,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,93,93,-45,-39,93,-65,-44,93,93,-40,-41,-42,-43,93,-46,93,93,93,]),'GREATER_THAN_EQUAL_TO':([43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[-63,95,-64,-66,-67,-68,95,-63,-61,-62,-60,95,-72,95,95,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,95,95,-45,-39,95,-65,-44,95,95,-40,-41,-42,-43,95,-46,95,95,95,]),'LESS_THAN_EQUAL_TO':([43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[-63,96,-64,-66,-67,-68,96,-63,-61,-62,-60,96,-72,96,96,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,96,96,-45,-39,96,-65,-44,96,96,-40,-41,-42,-43,96,-46,96,96,96,]),'NOT_EQUAL':([43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[-63,97,-64,-66,-67,-68,97,-63,-61,-62,-60,97,-72,97,97,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,97,97,-45,-39,97,-65,-44,97,97,-40,-41,-42,-43,97,-46,97,97,97,]),'OR':([43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[-63,98,-64,-66,-67,-68,98,-63,-61,-62,-60,98,-72,98,98,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,-39,98,-65,-44,98,98,-40,-41,-42,-43,98,-46,98,98,98,]),'AND':([43,47,63,64,65,66,106,107,110,111,112,113,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,155,156,158,161,163,165,166,167,168,170,171,175,176,183,],[-63,99,-64,-66,-67,-68,99,-63,-61,-62,-60,99,-72,99,99,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,99,-59,-45,-39,99,-65,-44,99,99,-40,-41,-42,-43,99,-46,99,99,99,]),'DBL_COLON':([43,],[80,]),'END':([45,46,50,51,52,56,57,59,70,83,84,100,101,108,109,116,149,181,182,184,187,188,],[-7,-91,-12,-13,-14,-16,-17,-20,-91,-8,-9,-10,-11,-18,-19,149,-25,-23,-21,-15,-22,-24,]),'ELSE':([50,51,52,56,57,59,84,100,101,108,109,149,181,182,184,187,188,],[-12,-13,-14,-16,-17,-20,-9,-10,-11,-18,-19,-25,-23,185,-15,-22,-24,]),'RSQUAREBR':([55,63,64,65,66,104,105,106,107,110,111,112,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,145,146,150,156,158,161,162,163,165,166,167,168,171,173,174,176,180,],[-91,-64,-66,-67,-68,145,-36,-37,-63,-61,-62,-60,-72,158,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,-91,-39,-65,-44,173,-38,174,-40,-41,-42,-43,-46,177,178,180,184,]),'COLON':([63,64,65,66,107,110,111,112,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,156,158,165,166,167,168,171,],[-64,-66,-67,-68,-63,-61,-62,-60,-72,159,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,-39,-65,-44,-40,-41,-42,-43,-46,]),'TO':([63,64,65,66,107,110,111,112,127,130,131,132,133,134,135,136,137,138,139,140,141,142,145,150,156,158,165,166,167,168,171,175,],[-64,-66,-67,-68,-63,-61,-62,-60,-72,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-45,-39,-65,-44,-40,-41,-42,-43,-46,179,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,3,],[1,5,]),'empty':([0,3,7,23,24,25,29,39,41,42,46,55,70,79,118,119,120,121,146,],[2,2,11,11,11,11,11,45,45,45,45,105,45,105,105,105,105,105,105,]),'func':([0,3,39,41,42,46,53,70,177,178,185,186,],[3,3,49,49,49,49,49,49,49,49,49,49,]),'flist':([7,23,24,25,29,],[9,30,33,34,38,]),'body':([39,41,42,46,70,],[44,77,78,83,116,]),'stmt':([39,41,42,46,53,70,177,178,185,186,],[46,46,46,46,102,46,181,182,187,188,]),'expr':([39,41,42,46,53,55,60,61,62,67,70,79,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,118,119,120,121,122,144,146,147,157,159,164,172,177,178,179,185,186,],[47,47,47,47,47,106,110,111,112,113,47,106,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,106,106,106,106,155,161,106,163,170,171,175,176,47,47,183,47,47,]),'defvar':([39,41,42,46,53,70,177,178,185,186,],[48,48,48,48,48,48,48,48,48,48,]),'single_if':([39,41,42,46,53,70,177,178,185,186,],[50,50,50,50,50,50,50,50,50,50,]),'if_with_else':([39,41,42,46,53,70,177,178,185,186,],[51,51,51,51,51,51,51,51,51,51,]),'while_loop':([39,41,42,46,53,70,177,178,185,186,],[52,52,52,52,52,52,52,52,52,52,]),'for_loop':([39,41,42,46,53,70,177,178,185,186,],[56,56,56,56,56,56,56,56,56,56,]),'block':([39,41,42,46,53,70,177,178,185,186,],[57,57,57,57,57,57,57,57,57,57,]),'return_instr':([39,41,42,46,53,70,177,178,185,186,],[58,58,58,58,58,58,58,58,58,58,]),'assignment':([39,41,42,46,53,55,60,61,62,67,70,79,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,118,119,120,121,122,144,146,147,157,159,164,172,177,178,179,185,186,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'in_methods':([39,41,42,46,53,55,60,61,62,67,70,79,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,118,119,120,121,122,144,146,147,157,159,164,172,177,178,179,185,186,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'clist':([55,79,118,119,120,121,146,],[104,125,151,152,153,154,162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> empty','prog',1,'p_prog','TeslangParser.py',38),
  ('prog -> func prog','prog',2,'p_prog','TeslangParser.py',39),
  ('func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR','func',11,'p_func','TeslangParser.py',45),
  ('func -> FN ID LPAREN flist RPAREN LESS_THAN TYPE GREATER_THAN EQ GREATER_THAN RETURN expr SEMI_COLON','func',13,'p_func','TeslangParser.py',46),
  ('func -> FN ID LPAREN error RPAREN LESS_THAN TYPE GREATER_THAN LCURLYEBR body RCURLYEBR','func',11,'p_func_parameter_error','TeslangParser.py',53),
  ('func -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR','func',11,'p_func_missing_return_type_error','TeslangParser.py',58),
  ('body -> empty','body',1,'p_body','TeslangParser.py',64),
  ('body -> stmt body','body',2,'p_body','TeslangParser.py',65),
  ('stmt -> expr SEMI_COLON','stmt',2,'p_stmt','TeslangParser.py',71),
  ('stmt -> defvar SEMI_COLON','stmt',2,'p_stmt','TeslangParser.py',72),
  ('stmt -> func SEMI_COLON','stmt',2,'p_stmt','TeslangParser.py',73),
  ('stmt -> single_if','stmt',1,'p_stmt','TeslangParser.py',74),
  ('stmt -> if_with_else','stmt',1,'p_stmt','TeslangParser.py',75),
  ('stmt -> while_loop','stmt',1,'p_stmt','TeslangParser.py',76),
  ('stmt -> DO stmt WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR','stmt',8,'p_stmt','TeslangParser.py',77),
  ('stmt -> for_loop','stmt',1,'p_stmt','TeslangParser.py',78),
  ('stmt -> block','stmt',1,'p_stmt','TeslangParser.py',79),
  ('stmt -> return_instr SEMI_COLON','stmt',2,'p_stmt','TeslangParser.py',80),
  ('stmt -> error SEMI_COLON','stmt',2,'p_stmt_error','TeslangParser.py',85),
  ('stmt -> error','stmt',1,'p_stmt_error','TeslangParser.py',86),
  ('single_if -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt','single_if',7,'p_single_if','TeslangParser.py',90),
  ('if_with_else -> IF LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt ELSE stmt','if_with_else',9,'p_if_with_else','TeslangParser.py',95),
  ('while_loop -> WHILE LSQUAREBR LSQUAREBR expr RSQUAREBR RSQUAREBR stmt','while_loop',7,'p_while_loop','TeslangParser.py',100),
  ('for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt','for_loop',9,'p_for_loop','TeslangParser.py',104),
  ('block -> BEGIN body END','block',3,'p_block','TeslangParser.py',109),
  ('return_instr -> RETURN expr','return_instr',2,'p_return_instr','TeslangParser.py',113),
  ('defvar -> ID DBL_COLON TYPE','defvar',3,'p_defvar','TeslangParser.py',118),
  ('defvar -> ID DBL_COLON TYPE EQ expr','defvar',5,'p_defvar','TeslangParser.py',119),
  ('flist -> empty','flist',1,'p_flist','TeslangParser.py',127),
  ('flist -> ID AS TYPE','flist',3,'p_flist','TeslangParser.py',128),
  ('flist -> ID AS TYPE COMMA flist','flist',5,'p_flist','TeslangParser.py',129),
  ('flist -> error AS TYPE COMMA flist','flist',5,'p_flist_error','TeslangParser.py',136),
  ('flist -> ID error TYPE COMMA flist','flist',5,'p_flist_error','TeslangParser.py',137),
  ('flist -> ID AS error COMMA flist','flist',5,'p_flist_error','TeslangParser.py',138),
  ('flist -> ID AS TYPE COMMA error','flist',5,'p_flist_error','TeslangParser.py',139),
  ('clist -> empty','clist',1,'p_clist','TeslangParser.py',148),
  ('clist -> expr','clist',1,'p_clist','TeslangParser.py',149),
  ('clist -> expr COMMA clist','clist',3,'p_clist','TeslangParser.py',150),
  ('in_methods -> SCAN LPAREN RPAREN','in_methods',3,'p_in_methods','TeslangParser.py',158),
  ('in_methods -> PRINT LPAREN clist RPAREN','in_methods',4,'p_in_methods','TeslangParser.py',159),
  ('in_methods -> LIST LPAREN clist RPAREN','in_methods',4,'p_in_methods','TeslangParser.py',160),
  ('in_methods -> LEN LPAREN clist RPAREN','in_methods',4,'p_in_methods','TeslangParser.py',161),
  ('in_methods -> EXIT LPAREN clist RPAREN','in_methods',4,'p_in_methods','TeslangParser.py',162),
  ('expr -> expr LSQUAREBR expr RSQUAREBR','expr',4,'p_expr','TeslangParser.py',170),
  ('expr -> LSQUAREBR clist RSQUAREBR','expr',3,'p_expr','TeslangParser.py',171),
  ('expr -> expr QUESTION expr COLON expr','expr',5,'p_expr','TeslangParser.py',172),
  ('expr -> expr PLUS expr','expr',3,'p_expr','TeslangParser.py',173),
  ('expr -> expr MINUS expr','expr',3,'p_expr','TeslangParser.py',174),
  ('expr -> expr TIMES expr','expr',3,'p_expr','TeslangParser.py',175),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','TeslangParser.py',176),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_expr','TeslangParser.py',177),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','TeslangParser.py',178),
  ('expr -> expr EQUAL expr','expr',3,'p_expr','TeslangParser.py',179),
  ('expr -> expr EQ expr','expr',3,'p_expr','TeslangParser.py',180),
  ('expr -> expr GREATER_THAN_EQUAL_TO expr','expr',3,'p_expr','TeslangParser.py',181),
  ('expr -> expr LESS_THAN_EQUAL_TO expr','expr',3,'p_expr','TeslangParser.py',182),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr','TeslangParser.py',183),
  ('expr -> expr OR expr','expr',3,'p_expr','TeslangParser.py',184),
  ('expr -> expr AND expr','expr',3,'p_expr','TeslangParser.py',185),
  ('expr -> NOT expr','expr',2,'p_expr','TeslangParser.py',186),
  ('expr -> PLUS expr','expr',2,'p_expr','TeslangParser.py',187),
  ('expr -> MINUS expr','expr',2,'p_expr','TeslangParser.py',188),
  ('expr -> ID','expr',1,'p_expr','TeslangParser.py',189),
  ('expr -> assignment','expr',1,'p_expr','TeslangParser.py',190),
  ('expr -> ID LPAREN clist RPAREN','expr',4,'p_expr','TeslangParser.py',191),
  ('expr -> NUMBER','expr',1,'p_expr','TeslangParser.py',192),
  ('expr -> in_methods','expr',1,'p_expr','TeslangParser.py',193),
  ('expr -> STRING','expr',1,'p_expr','TeslangParser.py',194),
  ('expr_list -> LSQUAREBR clist RSQUAREBR','expr_list',3,'p_expr_list','TeslangParser.py',208),
  ('operation_on_list -> expr LSQUAREBR expr RSQUAREBR','operation_on_list',4,'p_operation_on_list','TeslangParser.py',212),
  ('operation_on_list -> ID LSQUAREBR expr RSQUAREBR','operation_on_list',4,'p_operation_on_list','TeslangParser.py',213),
  ('assignment -> ID EQ expr','assignment',3,'p_assignment','TeslangParser.py',217),
  ('ternary_expr -> expr QUESTION expr COLON expr','ternary_expr',5,'p_ternary_expr','TeslangParser.py',221),
  ('function_call -> ID LPAREN clist RPAREN','function_call',4,'p_function_call','TeslangParser.py',225),
  ('function_call -> ID LPAREN error RPAREN','function_call',4,'p_function_call_error','TeslangParser.py',229),
  ('binary_expr -> expr PLUS expr','binary_expr',3,'p_binary_expr','TeslangParser.py',233),
  ('binary_expr -> expr MINUS expr','binary_expr',3,'p_binary_expr','TeslangParser.py',234),
  ('binary_expr -> expr TIMES expr','binary_expr',3,'p_binary_expr','TeslangParser.py',235),
  ('binary_expr -> expr DIVIDE expr','binary_expr',3,'p_binary_expr','TeslangParser.py',236),
  ('binary_expr -> expr MOD expr','binary_expr',3,'p_binary_expr','TeslangParser.py',237),
  ('binary_expr -> expr GREATER_THAN expr','binary_expr',3,'p_binary_expr','TeslangParser.py',238),
  ('binary_expr -> expr GREATER_THAN_EQUAL_TO expr','binary_expr',3,'p_binary_expr','TeslangParser.py',239),
  ('binary_expr -> expr LESS_THAN expr','binary_expr',3,'p_binary_expr','TeslangParser.py',240),
  ('binary_expr -> expr LESS_THAN_EQUAL_TO expr','binary_expr',3,'p_binary_expr','TeslangParser.py',241),
  ('binary_expr -> expr EQ expr','binary_expr',3,'p_binary_expr','TeslangParser.py',242),
  ('binary_expr -> expr EQUAL expr','binary_expr',3,'p_binary_expr','TeslangParser.py',243),
  ('binary_expr -> expr NOT expr','binary_expr',3,'p_binary_expr','TeslangParser.py',244),
  ('binary_expr -> expr NOT_EQUAL expr','binary_expr',3,'p_binary_expr','TeslangParser.py',245),
  ('binary_expr -> expr OR expr','binary_expr',3,'p_binary_expr','TeslangParser.py',246),
  ('binary_expr -> expr AND expr','binary_expr',3,'p_binary_expr','TeslangParser.py',247),
  ('empty -> <empty>','empty',0,'p_empty','TeslangParser.py',252),
]
